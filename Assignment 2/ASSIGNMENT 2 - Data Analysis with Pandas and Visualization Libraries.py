{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "55b900b3",
   "metadata": {},
   "source": [
    "Name : ANMOL ARORA\t\n",
    "\n",
    "Roll No. : 2301560043\n",
    "\n",
    "Subject : AI_ML\t\t\t\n",
    "\n",
    "Program : MCA(SOET)\n",
    "\n",
    "Entire Code Is Available Here : https://github.com/ASquare04/AI_ML"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5c02f258",
   "metadata": {},
   "source": [
    "### General Pandas Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0928b609",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>13495.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>94.5</td>\n",
       "      <td>171.2</td>\n",
       "      <td>ohcv</td>\n",
       "      <td>six</td>\n",
       "      <td>154</td>\n",
       "      <td>19</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.8</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>102</td>\n",
       "      <td>24</td>\n",
       "      <td>13950.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.4</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>five</td>\n",
       "      <td>115</td>\n",
       "      <td>18</td>\n",
       "      <td>17450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>81</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>85</td>\n",
       "      <td>27</td>\n",
       "      <td>7975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>82</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>52</td>\n",
       "      <td>37</td>\n",
       "      <td>7995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>86</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>100</td>\n",
       "      <td>26</td>\n",
       "      <td>9995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>87</td>\n",
       "      <td>volvo</td>\n",
       "      <td>sedan</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>12940.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>88</td>\n",
       "      <td>volvo</td>\n",
       "      <td>wagon</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>13415.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    index      company   body-style  wheel-base  length engine-type  \\\n",
       "0       0  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "1       1  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "2       2  alfa-romero    hatchback        94.5   171.2        ohcv   \n",
       "3       3         audi        sedan        99.8   176.6         ohc   \n",
       "4       4         audi        sedan        99.4   176.6         ohc   \n",
       "..    ...          ...          ...         ...     ...         ...   \n",
       "56     81   volkswagen        sedan        97.3   171.7         ohc   \n",
       "57     82   volkswagen        sedan        97.3   171.7         ohc   \n",
       "58     86   volkswagen        sedan        97.3   171.7         ohc   \n",
       "59     87        volvo        sedan       104.3   188.8         ohc   \n",
       "60     88        volvo        wagon       104.3   188.8         ohc   \n",
       "\n",
       "   num-of-cylinders  horsepower  average-mileage    price  \n",
       "0              four         111               21  13495.0  \n",
       "1              four         111               21  16500.0  \n",
       "2               six         154               19  16500.0  \n",
       "3              four         102               24  13950.0  \n",
       "4              five         115               18  17450.0  \n",
       "..              ...         ...              ...      ...  \n",
       "56             four          85               27   7975.0  \n",
       "57             four          52               37   7995.0  \n",
       "58             four         100               26   9995.0  \n",
       "59             four         114               23  12940.0  \n",
       "60             four         114               23  13415.0  \n",
       "\n",
       "[61 rows x 10 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "dataSet = pd.read_csv('Automobile_data.csv') \n",
    "dataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0393b79f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 1: From the given dataset print the first and last five rows "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "efc54494",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>13495.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>94.5</td>\n",
       "      <td>171.2</td>\n",
       "      <td>ohcv</td>\n",
       "      <td>six</td>\n",
       "      <td>154</td>\n",
       "      <td>19</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.8</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>102</td>\n",
       "      <td>24</td>\n",
       "      <td>13950.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.4</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>five</td>\n",
       "      <td>115</td>\n",
       "      <td>18</td>\n",
       "      <td>17450.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index      company   body-style  wheel-base  length engine-type  \\\n",
       "0      0  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "1      1  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "2      2  alfa-romero    hatchback        94.5   171.2        ohcv   \n",
       "3      3         audi        sedan        99.8   176.6         ohc   \n",
       "4      4         audi        sedan        99.4   176.6         ohc   \n",
       "\n",
       "  num-of-cylinders  horsepower  average-mileage    price  \n",
       "0             four         111               21  13495.0  \n",
       "1             four         111               21  16500.0  \n",
       "2              six         154               19  16500.0  \n",
       "3             four         102               24  13950.0  \n",
       "4             five         115               18  17450.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataSet.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad9b4547",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>81</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>85</td>\n",
       "      <td>27</td>\n",
       "      <td>7975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>82</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>52</td>\n",
       "      <td>37</td>\n",
       "      <td>7995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>86</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>100</td>\n",
       "      <td>26</td>\n",
       "      <td>9995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>87</td>\n",
       "      <td>volvo</td>\n",
       "      <td>sedan</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>12940.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>88</td>\n",
       "      <td>volvo</td>\n",
       "      <td>wagon</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>13415.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index     company body-style  wheel-base  length engine-type  \\\n",
       "56     81  volkswagen      sedan        97.3   171.7         ohc   \n",
       "57     82  volkswagen      sedan        97.3   171.7         ohc   \n",
       "58     86  volkswagen      sedan        97.3   171.7         ohc   \n",
       "59     87       volvo      sedan       104.3   188.8         ohc   \n",
       "60     88       volvo      wagon       104.3   188.8         ohc   \n",
       "\n",
       "   num-of-cylinders  horsepower  average-mileage    price  \n",
       "56             four          85               27   7975.0  \n",
       "57             four          52               37   7995.0  \n",
       "58             four         100               26   9995.0  \n",
       "59             four         114               23  12940.0  \n",
       "60             four         114               23  13415.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataSet.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9623023",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 2: Clean the dataset and update the CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9c8077e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSet = pd.read_csv(\"Automobile_data.csv\", na_values={\n",
    "'price':[\"?\",\"n.a\",\"NaN\"],\n",
    "'stroke':[\"?\",\"n.a\",\"NaN\"],\n",
    "'horsepower':[\"?\",\"n.a\",\"NaN\"],\n",
    "'peak-rpm':[\"?\",\"n.a\",\"NaN\"],\n",
    "'average-mileage':[\"?\",\"n.a\",\"NaN\"]})\n",
    "\n",
    "dataSet.to_csv(\"Automobile0.2_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "09d67eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>13495.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>convertible</td>\n",
       "      <td>88.6</td>\n",
       "      <td>168.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>four</td>\n",
       "      <td>111</td>\n",
       "      <td>21</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>alfa-romero</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>94.5</td>\n",
       "      <td>171.2</td>\n",
       "      <td>ohcv</td>\n",
       "      <td>six</td>\n",
       "      <td>154</td>\n",
       "      <td>19</td>\n",
       "      <td>16500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.8</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>102</td>\n",
       "      <td>24</td>\n",
       "      <td>13950.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>audi</td>\n",
       "      <td>sedan</td>\n",
       "      <td>99.4</td>\n",
       "      <td>176.6</td>\n",
       "      <td>ohc</td>\n",
       "      <td>five</td>\n",
       "      <td>115</td>\n",
       "      <td>18</td>\n",
       "      <td>17450.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>81</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>85</td>\n",
       "      <td>27</td>\n",
       "      <td>7975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>82</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>52</td>\n",
       "      <td>37</td>\n",
       "      <td>7995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>86</td>\n",
       "      <td>volkswagen</td>\n",
       "      <td>sedan</td>\n",
       "      <td>97.3</td>\n",
       "      <td>171.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>100</td>\n",
       "      <td>26</td>\n",
       "      <td>9995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>87</td>\n",
       "      <td>volvo</td>\n",
       "      <td>sedan</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>12940.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>88</td>\n",
       "      <td>volvo</td>\n",
       "      <td>wagon</td>\n",
       "      <td>104.3</td>\n",
       "      <td>188.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>114</td>\n",
       "      <td>23</td>\n",
       "      <td>13415.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    index      company   body-style  wheel-base  length engine-type  \\\n",
       "0       0  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "1       1  alfa-romero  convertible        88.6   168.8        dohc   \n",
       "2       2  alfa-romero    hatchback        94.5   171.2        ohcv   \n",
       "3       3         audi        sedan        99.8   176.6         ohc   \n",
       "4       4         audi        sedan        99.4   176.6         ohc   \n",
       "..    ...          ...          ...         ...     ...         ...   \n",
       "56     81   volkswagen        sedan        97.3   171.7         ohc   \n",
       "57     82   volkswagen        sedan        97.3   171.7         ohc   \n",
       "58     86   volkswagen        sedan        97.3   171.7         ohc   \n",
       "59     87        volvo        sedan       104.3   188.8         ohc   \n",
       "60     88        volvo        wagon       104.3   188.8         ohc   \n",
       "\n",
       "   num-of-cylinders  horsepower  average-mileage    price  \n",
       "0              four         111               21  13495.0  \n",
       "1              four         111               21  16500.0  \n",
       "2               six         154               19  16500.0  \n",
       "3              four         102               24  13950.0  \n",
       "4              five         115               18  17450.0  \n",
       "..              ...         ...              ...      ...  \n",
       "56             four          85               27   7975.0  \n",
       "57             four          52               37   7995.0  \n",
       "58             four         100               26   9995.0  \n",
       "59             four         114               23  12940.0  \n",
       "60             four         114               23  13415.0  \n",
       "\n",
       "[61 rows x 10 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7706e5dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 3: Find the most expensive car company name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5972bd5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>mercedes-benz</td>\n",
       "      <td>45400.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          company    price\n",
       "35  mercedes-benz  45400.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "value = dataSet[['company','price']][dataSet.price==dataSet['price'].max()]\n",
    "value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61d0b345",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 4: Print All Toyota Cars details"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc041b25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>66</td>\n",
       "      <td>toyota</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>95.7</td>\n",
       "      <td>158.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>35</td>\n",
       "      <td>5348.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>67</td>\n",
       "      <td>toyota</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>95.7</td>\n",
       "      <td>158.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>31</td>\n",
       "      <td>6338.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>68</td>\n",
       "      <td>toyota</td>\n",
       "      <td>hatchback</td>\n",
       "      <td>95.7</td>\n",
       "      <td>158.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>31</td>\n",
       "      <td>6488.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>69</td>\n",
       "      <td>toyota</td>\n",
       "      <td>wagon</td>\n",
       "      <td>95.7</td>\n",
       "      <td>169.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>31</td>\n",
       "      <td>6918.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>70</td>\n",
       "      <td>toyota</td>\n",
       "      <td>wagon</td>\n",
       "      <td>95.7</td>\n",
       "      <td>169.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>27</td>\n",
       "      <td>7898.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>71</td>\n",
       "      <td>toyota</td>\n",
       "      <td>wagon</td>\n",
       "      <td>95.7</td>\n",
       "      <td>169.7</td>\n",
       "      <td>ohc</td>\n",
       "      <td>four</td>\n",
       "      <td>62</td>\n",
       "      <td>27</td>\n",
       "      <td>8778.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>79</td>\n",
       "      <td>toyota</td>\n",
       "      <td>wagon</td>\n",
       "      <td>104.5</td>\n",
       "      <td>187.8</td>\n",
       "      <td>dohc</td>\n",
       "      <td>six</td>\n",
       "      <td>156</td>\n",
       "      <td>19</td>\n",
       "      <td>15750.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index company body-style  wheel-base  length engine-type num-of-cylinders  \\\n",
       "48     66  toyota  hatchback        95.7   158.7         ohc             four   \n",
       "49     67  toyota  hatchback        95.7   158.7         ohc             four   \n",
       "50     68  toyota  hatchback        95.7   158.7         ohc             four   \n",
       "51     69  toyota      wagon        95.7   169.7         ohc             four   \n",
       "52     70  toyota      wagon        95.7   169.7         ohc             four   \n",
       "53     71  toyota      wagon        95.7   169.7         ohc             four   \n",
       "54     79  toyota      wagon       104.5   187.8        dohc              six   \n",
       "\n",
       "    horsepower  average-mileage    price  \n",
       "48          62               35   5348.0  \n",
       "49          62               31   6338.0  \n",
       "50          62               31   6488.0  \n",
       "51          62               31   6918.0  \n",
       "52          62               27   7898.0  \n",
       "53          62               27   8778.0  \n",
       "54         156               19  15750.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "allToyota = dataSet[(dataSet.company)=='toyota']\n",
    "allToyota\n",
    "\n",
    "#carCompany = dataSet.groupby('company')\n",
    "#toyota = carCompany.get_group('toyota')\n",
    "#toyota"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "329396fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 5: Count total cars per company"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7aa12d99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "toyota           7\n",
       "bmw              6\n",
       "mazda            5\n",
       "nissan           5\n",
       "audi             4\n",
       "mercedes-benz    4\n",
       "mitsubishi       4\n",
       "volkswagen       4\n",
       "alfa-romero      3\n",
       "chevrolet        3\n",
       "honda            3\n",
       "isuzu            3\n",
       "jaguar           3\n",
       "porsche          3\n",
       "dodge            2\n",
       "volvo            2\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carCompany = dataSet['company'].value_counts()\n",
    "carCompany"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4909dd7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 6: Find each companyâ€™s Higesht price car"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d5d7ecc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "alfa-romero      16500.0\n",
       "audi             18920.0\n",
       "bmw              41315.0\n",
       "chevrolet         6575.0\n",
       "dodge             6377.0\n",
       "honda            12945.0\n",
       "isuzu             6785.0\n",
       "jaguar           36000.0\n",
       "mazda            18344.0\n",
       "mercedes-benz    45400.0\n",
       "mitsubishi        8189.0\n",
       "nissan           13499.0\n",
       "porsche          37028.0\n",
       "toyota           15750.0\n",
       "volkswagen        9995.0\n",
       "volvo            13415.0\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carCompany = dataSet.groupby('company')\n",
    "price = carCompany['price'].max()\n",
    "price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2f65383",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 7: Find the average mileage of each car making company"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6cc78355",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "alfa-romero      20.333333\n",
       "audi             20.000000\n",
       "bmw              19.000000\n",
       "chevrolet        41.000000\n",
       "dodge            31.000000\n",
       "honda            26.333333\n",
       "isuzu            33.333333\n",
       "jaguar           14.333333\n",
       "mazda            28.000000\n",
       "mercedes-benz    18.000000\n",
       "mitsubishi       29.500000\n",
       "nissan           31.400000\n",
       "porsche          17.000000\n",
       "toyota           28.714286\n",
       "volkswagen       31.750000\n",
       "volvo            23.000000\n",
       "Name: average-mileage, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "carCompany = dataSet.groupby('company')\n",
    "mileage = carCompany['average-mileage'].mean()\n",
    "mileage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b02bba1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 8: Sort all cars by Price column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "39322ada",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>company</th>\n",
       "      <th>body-style</th>\n",
       "      <th>wheel-base</th>\n",
       "      <th>length</th>\n",
       "      <th>engine-type</th>\n",
       "      <th>num-of-cylinders</th>\n",
       "      <th>horsepower</th>\n",
       "      <th>average-mileage</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>47</td>\n",
       "      <td>mercedes-benz</td>\n",
       "      <td>hardtop</td>\n",
       "      <td>112.0</td>\n",
       "      <td>199.2</td>\n",
       "      <td>ohcv</td>\n",
       "      <td>eight</td>\n",
       "      <td>184</td>\n",
       "      <td>14</td>\n",
       "      <td>45400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14</td>\n",
       "      <td>bmw</td>\n",
       "      <td>sedan</td>\n",
       "      <td>103.5</td>\n",
       "      <td>193.8</td>\n",
       "      <td>ohc</td>\n",
       "      <td>six</td>\n",
       "      <td>182</td>\n",
       "      <td>16</td>\n",
       "      <td>41315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>46</td>\n",
       "      <td>mercedes-benz</td>\n",
       "      <td>sedan</td>\n",
       "      <td>120.9</td>\n",
       "      <td>208.1</td>\n",
       "      <td>ohcv</td>\n",
       "      <td>eight</td>\n",
       "      <td>184</td>\n",
       "      <td>14</td>\n",
       "      <td>40960.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>62</td>\n",
       "      <td>porsche</td>\n",
       "      <td>convertible</td>\n",
       "      <td>89.5</td>\n",
       "      <td>168.9</td>\n",
       "      <td>ohcf</td>\n",
       "      <td>six</td>\n",
       "      <td>207</td>\n",
       "      <td>17</td>\n",
       "      <td>37028.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>15</td>\n",
       "      <td>bmw</td>\n",
       "      <td>sedan</td>\n",
       "      <td>110.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>ohc</td>\n",
       "      <td>six</td>\n",
       "      <td>182</td>\n",
       "      <td>15</td>\n",
       "      <td>36880.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index        company   body-style  wheel-base  length engine-type  \\\n",
       "35     47  mercedes-benz      hardtop       112.0   199.2        ohcv   \n",
       "11     14            bmw        sedan       103.5   193.8         ohc   \n",
       "34     46  mercedes-benz        sedan       120.9   208.1        ohcv   \n",
       "46     62        porsche  convertible        89.5   168.9        ohcf   \n",
       "12     15            bmw        sedan       110.0   197.0         ohc   \n",
       "\n",
       "   num-of-cylinders  horsepower  average-mileage    price  \n",
       "35            eight         184               14  45400.0  \n",
       "11              six         182               16  41315.0  \n",
       "34            eight         184               14  40960.0  \n",
       "46              six         207               17  37028.0  \n",
       "12              six         182               15  36880.0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cars = dataSet.sort_values(by=['price'], ascending=False)\n",
    "cars.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1583d8e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 9: Concatenate two data frames using the following conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8faaadda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Germany</th>\n",
       "      <th>0</th>\n",
       "      <td>Ford</td>\n",
       "      <td>23845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mercedes</td>\n",
       "      <td>171995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BMV</td>\n",
       "      <td>135925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Audi</td>\n",
       "      <td>71400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Japan</th>\n",
       "      <th>0</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>29995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Honda</td>\n",
       "      <td>23600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nissan</td>\n",
       "      <td>61500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mitsubishi</td>\n",
       "      <td>58900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Company   Price\n",
       "Germany 0         Ford   23845\n",
       "        1     Mercedes  171995\n",
       "        2          BMV  135925\n",
       "        3         Audi   71400\n",
       "Japan   0       Toyota   29995\n",
       "        1        Honda   23600\n",
       "        2       Nissan   61500\n",
       "        3  Mitsubishi    58900"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GermanCars = {'Company': ['Ford', 'Mercedes', 'BMV', 'Audi'], 'Price': [23845, 171995, 135925 , 71400]}\n",
    "japaneseCars = {'Company': ['Toyota', 'Honda', 'Nissan', 'Mitsubishi '], 'Price': [29995, 23600, 61500 , 58900]}\n",
    "carsDf1 = pd.DataFrame.from_dict(GermanCars)\n",
    "carsDf2 = pd.DataFrame.from_dict(japaneseCars)\n",
    "carsDf = pd.concat([carsDf1, carsDf2], keys=[\"Germany\", \"Japan\"])\n",
    "carsDf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c31e795",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 10: Merge two data frames using the following condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d623448a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Company</th>\n",
       "      <th>Price</th>\n",
       "      <th>horsepower</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>23845</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Honda</td>\n",
       "      <td>17995</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BMV</td>\n",
       "      <td>135925</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Audi</td>\n",
       "      <td>71400</td>\n",
       "      <td>160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Company   Price  horsepower\n",
       "0  Toyota   23845         141\n",
       "1   Honda   17995          80\n",
       "2     BMV  135925         182\n",
       "3    Audi   71400         160"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Car_Price = {'Company': ['Toyota', 'Honda', 'BMV', 'Audi'], 'Price': [23845, 17995, 135925 , 71400]}\n",
    "car_Horsepower = {'Company': ['Toyota', 'Honda', 'BMV', 'Audi'], 'horsepower': [141, 80, 182 , 160]}\n",
    "carPriceDf = pd.DataFrame.from_dict(Car_Price)\n",
    "carsHorsepowerDf = pd.DataFrame.from_dict(car_Horsepower)\n",
    "carsDf = pd.merge(carPriceDf, carsHorsepowerDf, on=\"Company\")\n",
    "carsDf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20365fd1",
   "metadata": {},
   "source": [
    "### Getting and Knowing your Data Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9167decc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 1. Import the necessary libraries, assign data to a variable called chipo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "200dd186",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n",
    "chipo = pd.read_csv(url, sep = '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "337b5c2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 2. See the first 10 entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "077f21fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>item_name</th>\n",
       "      <th>choice_description</th>\n",
       "      <th>item_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Fresh Tomato Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Izze</td>\n",
       "      <td>[Clementine]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Nantucket Nectar</td>\n",
       "      <td>[Apple]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Tomatillo-Green Chili Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n",
       "      <td>$16.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...</td>\n",
       "      <td>$10.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Side of Chips</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Tomatillo Red Chili Salsa, [Fajita Vegetables...</td>\n",
       "      <td>$11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Soft Tacos</td>\n",
       "      <td>[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  quantity                              item_name  \\\n",
       "0         1         1           Chips and Fresh Tomato Salsa   \n",
       "1         1         1                                   Izze   \n",
       "2         1         1                       Nantucket Nectar   \n",
       "3         1         1  Chips and Tomatillo-Green Chili Salsa   \n",
       "4         2         2                           Chicken Bowl   \n",
       "5         3         1                           Chicken Bowl   \n",
       "6         3         1                          Side of Chips   \n",
       "7         4         1                          Steak Burrito   \n",
       "8         4         1                       Steak Soft Tacos   \n",
       "9         5         1                          Steak Burrito   \n",
       "\n",
       "                                  choice_description item_price  \n",
       "0                                                NaN     $2.39   \n",
       "1                                       [Clementine]     $3.39   \n",
       "2                                            [Apple]     $3.39   \n",
       "3                                                NaN     $2.39   \n",
       "4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n",
       "5  [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n",
       "6                                                NaN     $1.69   \n",
       "7  [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n",
       "8  [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n",
       "9  [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eea989ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 3. What is the number of observations in the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "86e7bb17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4622"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(chipo) #chipo.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "969f8cd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 4. What is the number of columns in the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "17cd5b48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be4587ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 5. Print the name of all the columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b16dca3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['order_id', 'quantity', 'item_name', 'choice_description',\n",
       "       'item_price'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e2c1009",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 6. How is the dataset indexed?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "671a33ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=4622, step=1)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0642b891",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 9. Which was the most-ordered item? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "caba799f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>choice_description</th>\n",
       "      <th>item_price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Chicken Bowl</th>\n",
       "      <td>713926</td>\n",
       "      <td>761</td>\n",
       "      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n",
       "      <td>$16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              order_id  quantity  \\\n",
       "item_name                          \n",
       "Chicken Bowl    713926       761   \n",
       "\n",
       "                                             choice_description  \\\n",
       "item_name                                                         \n",
       "Chicken Bowl  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...   \n",
       "\n",
       "                                                     item_price  \n",
       "item_name                                                        \n",
       "Chicken Bowl  $16.98 $10.98 $11.25 $8.75 $8.49 $11.25 $8.75 ...  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#counts = chipo.groupby('item_name')['quantity'].sum().max()\n",
    "#counts\n",
    "count = chipo.groupby('item_name')\n",
    "count = count.sum()\n",
    "count = count.sort_values(['quantity'])\n",
    "count.tail(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5332ef07",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 11. What was the most ordered item in the choice_description column?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "86e6c6f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>item_name</th>\n",
       "      <th>item_price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>choice_description</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>[Diet Coke]</th>\n",
       "      <td>123455</td>\n",
       "      <td>159</td>\n",
       "      <td>Canned SodaCanned SodaCanned Soda6 Pack Soft D...</td>\n",
       "      <td>326.71</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    order_id  quantity  \\\n",
       "choice_description                       \n",
       "[Diet Coke]           123455       159   \n",
       "\n",
       "                                                            item_name  \\\n",
       "choice_description                                                      \n",
       "[Diet Coke]         Canned SodaCanned SodaCanned Soda6 Pack Soft D...   \n",
       "\n",
       "                    item_price  \n",
       "choice_description              \n",
       "[Diet Coke]             326.71  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count = chipo.groupby('choice_description').sum()\n",
    "count = count.sort_values(['quantity'], ascending=False)\n",
    "count.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0a3a5da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 12. How many items were orderd in total?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9ae33d62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4972"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = chipo.quantity.sum()\n",
    "total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "caa7c1e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 13. Turn the item price into a float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "398a05ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float64')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.item_price.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9608fe7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 14. How much was the revenue for the period in the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6ef7b9c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Revenue was: $39237.02\n"
     ]
    }
   ],
   "source": [
    "revenue = (chipo['quantity']* chipo['item_price']).sum()\n",
    "\n",
    "print('Revenue was: $' + str(np.round(revenue,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aaa5fe93",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 15. How many orders were made in the period?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b45a135f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1834"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders = chipo.order_id.value_counts().count()\n",
    "orders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f014f09c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 16. How many different items are sold?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "997a5706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chipo.item_name.value_counts().count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9eee7343",
   "metadata": {},
   "source": [
    "### Filtering and Sorting Data Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f13b98fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 1. Import the necessary libraries, assign it to a variable called euro12."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2f6ec4de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Goals</th>\n",
       "      <th>Shots on target</th>\n",
       "      <th>Shots off target</th>\n",
       "      <th>Shooting Accuracy</th>\n",
       "      <th>% Goals-to-shots</th>\n",
       "      <th>Total shots (inc. Blocked)</th>\n",
       "      <th>Hit Woodwork</th>\n",
       "      <th>Penalty goals</th>\n",
       "      <th>Penalties not scored</th>\n",
       "      <th>...</th>\n",
       "      <th>Saves made</th>\n",
       "      <th>Saves-to-shots ratio</th>\n",
       "      <th>Fouls Won</th>\n",
       "      <th>Fouls Conceded</th>\n",
       "      <th>Offsides</th>\n",
       "      <th>Yellow Cards</th>\n",
       "      <th>Red Cards</th>\n",
       "      <th>Subs on</th>\n",
       "      <th>Subs off</th>\n",
       "      <th>Players Used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>51.9%</td>\n",
       "      <td>16.0%</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>81.3%</td>\n",
       "      <td>41</td>\n",
       "      <td>62</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Czech Republic</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>41.9%</td>\n",
       "      <td>12.9%</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>60.1%</td>\n",
       "      <td>53</td>\n",
       "      <td>73</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>50.0%</td>\n",
       "      <td>20.0%</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>66.7%</td>\n",
       "      <td>25</td>\n",
       "      <td>38</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>England</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>50.0%</td>\n",
       "      <td>17.2%</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>22</td>\n",
       "      <td>88.1%</td>\n",
       "      <td>43</td>\n",
       "      <td>45</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>24</td>\n",
       "      <td>37.9%</td>\n",
       "      <td>6.5%</td>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>54.6%</td>\n",
       "      <td>36</td>\n",
       "      <td>51</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>10</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>47.8%</td>\n",
       "      <td>15.6%</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>62.6%</td>\n",
       "      <td>63</td>\n",
       "      <td>49</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Greece</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>30.7%</td>\n",
       "      <td>19.2%</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>65.1%</td>\n",
       "      <td>67</td>\n",
       "      <td>48</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Italy</td>\n",
       "      <td>6</td>\n",
       "      <td>34</td>\n",
       "      <td>45</td>\n",
       "      <td>43.0%</td>\n",
       "      <td>7.5%</td>\n",
       "      <td>110</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>74.1%</td>\n",
       "      <td>101</td>\n",
       "      <td>89</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>36</td>\n",
       "      <td>25.0%</td>\n",
       "      <td>4.1%</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>70.6%</td>\n",
       "      <td>35</td>\n",
       "      <td>30</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Poland</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>39.4%</td>\n",
       "      <td>5.2%</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>66.7%</td>\n",
       "      <td>48</td>\n",
       "      <td>56</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>42</td>\n",
       "      <td>34.3%</td>\n",
       "      <td>9.3%</td>\n",
       "      <td>82</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>71.5%</td>\n",
       "      <td>73</td>\n",
       "      <td>90</td>\n",
       "      <td>10</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>36.8%</td>\n",
       "      <td>5.2%</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>65.4%</td>\n",
       "      <td>43</td>\n",
       "      <td>51</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Russia</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>31</td>\n",
       "      <td>22.5%</td>\n",
       "      <td>12.5%</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>77.0%</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Spain</td>\n",
       "      <td>12</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>55.9%</td>\n",
       "      <td>16.0%</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>93.8%</td>\n",
       "      <td>102</td>\n",
       "      <td>83</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "      <td>47.2%</td>\n",
       "      <td>13.8%</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>61.6%</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "      <td>21.2%</td>\n",
       "      <td>6.0%</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>76.5%</td>\n",
       "      <td>48</td>\n",
       "      <td>31</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Team  Goals  Shots on target  Shots off target  \\\n",
       "0               Croatia      4               13                12   \n",
       "1        Czech Republic      4               13                18   \n",
       "2               Denmark      4               10                10   \n",
       "3               England      5               11                18   \n",
       "4                France      3               22                24   \n",
       "5               Germany     10               32                32   \n",
       "6                Greece      5                8                18   \n",
       "7                 Italy      6               34                45   \n",
       "8           Netherlands      2               12                36   \n",
       "9                Poland      2               15                23   \n",
       "10             Portugal      6               22                42   \n",
       "11  Republic of Ireland      1                7                12   \n",
       "12               Russia      5                9                31   \n",
       "13                Spain     12               42                33   \n",
       "14               Sweden      5               17                19   \n",
       "15              Ukraine      2                7                26   \n",
       "\n",
       "   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n",
       "0              51.9%            16.0%                          32   \n",
       "1              41.9%            12.9%                          39   \n",
       "2              50.0%            20.0%                          27   \n",
       "3              50.0%            17.2%                          40   \n",
       "4              37.9%             6.5%                          65   \n",
       "5              47.8%            15.6%                          80   \n",
       "6              30.7%            19.2%                          32   \n",
       "7              43.0%             7.5%                         110   \n",
       "8              25.0%             4.1%                          60   \n",
       "9              39.4%             5.2%                          48   \n",
       "10             34.3%             9.3%                          82   \n",
       "11             36.8%             5.2%                          28   \n",
       "12             22.5%            12.5%                          59   \n",
       "13             55.9%            16.0%                         100   \n",
       "14             47.2%            13.8%                          39   \n",
       "15             21.2%             6.0%                          38   \n",
       "\n",
       "    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n",
       "0              0              0                     0  ...          13   \n",
       "1              0              0                     0  ...           9   \n",
       "2              1              0                     0  ...          10   \n",
       "3              0              0                     0  ...          22   \n",
       "4              1              0                     0  ...           6   \n",
       "5              2              1                     0  ...          10   \n",
       "6              1              1                     1  ...          13   \n",
       "7              2              0                     0  ...          20   \n",
       "8              2              0                     0  ...          12   \n",
       "9              0              0                     0  ...           6   \n",
       "10             6              0                     0  ...          10   \n",
       "11             0              0                     0  ...          17   \n",
       "12             2              0                     0  ...          10   \n",
       "13             0              1                     0  ...          15   \n",
       "14             3              0                     0  ...           8   \n",
       "15             0              0                     0  ...          13   \n",
       "\n",
       "    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n",
       "0                  81.3%         41             62         2             9   \n",
       "1                  60.1%         53             73         8             7   \n",
       "2                  66.7%         25             38         8             4   \n",
       "3                  88.1%         43             45         6             5   \n",
       "4                  54.6%         36             51         5             6   \n",
       "5                  62.6%         63             49        12             4   \n",
       "6                  65.1%         67             48        12             9   \n",
       "7                  74.1%        101             89        16            16   \n",
       "8                  70.6%         35             30         3             5   \n",
       "9                  66.7%         48             56         3             7   \n",
       "10                 71.5%         73             90        10            12   \n",
       "11                 65.4%         43             51        11             6   \n",
       "12                 77.0%         34             43         4             6   \n",
       "13                 93.8%        102             83        19            11   \n",
       "14                 61.6%         35             51         7             7   \n",
       "15                 76.5%         48             31         4             5   \n",
       "\n",
       "    Red Cards  Subs on  Subs off  Players Used  \n",
       "0           0        9         9            16  \n",
       "1           0       11        11            19  \n",
       "2           0        7         7            15  \n",
       "3           0       11        11            16  \n",
       "4           0       11        11            19  \n",
       "5           0       15        15            17  \n",
       "6           1       12        12            20  \n",
       "7           0       18        18            19  \n",
       "8           0        7         7            15  \n",
       "9           1        7         7            17  \n",
       "10          0       14        14            16  \n",
       "11          1       10        10            17  \n",
       "12          0        7         7            16  \n",
       "13          0       17        17            18  \n",
       "14          0        9         9            18  \n",
       "15          0        9         9            18  \n",
       "\n",
       "[16 rows x 35 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "euro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv', sep=',')\n",
    "euro12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39489656",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 2. Select only the Goal column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8148665b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      4\n",
       "1      4\n",
       "2      4\n",
       "3      5\n",
       "4      3\n",
       "5     10\n",
       "6      5\n",
       "7      6\n",
       "8      2\n",
       "9      2\n",
       "10     6\n",
       "11     1\n",
       "12     5\n",
       "13    12\n",
       "14     5\n",
       "15     2\n",
       "Name: Goals, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12.Goals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c013bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 3. How many team participated in the Euro2012?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0329817e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84e2bf4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 4. What is the number of columns in the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e633eb33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 16 entries, 0 to 15\n",
      "Data columns (total 35 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   Team                        16 non-null     object \n",
      " 1   Goals                       16 non-null     int64  \n",
      " 2   Shots on target             16 non-null     int64  \n",
      " 3   Shots off target            16 non-null     int64  \n",
      " 4   Shooting Accuracy           16 non-null     object \n",
      " 5   % Goals-to-shots            16 non-null     object \n",
      " 6   Total shots (inc. Blocked)  16 non-null     int64  \n",
      " 7   Hit Woodwork                16 non-null     int64  \n",
      " 8   Penalty goals               16 non-null     int64  \n",
      " 9   Penalties not scored        16 non-null     int64  \n",
      " 10  Headed goals                16 non-null     int64  \n",
      " 11  Passes                      16 non-null     int64  \n",
      " 12  Passes completed            16 non-null     int64  \n",
      " 13  Passing Accuracy            16 non-null     object \n",
      " 14  Touches                     16 non-null     int64  \n",
      " 15  Crosses                     16 non-null     int64  \n",
      " 16  Dribbles                    16 non-null     int64  \n",
      " 17  Corners Taken               16 non-null     int64  \n",
      " 18  Tackles                     16 non-null     int64  \n",
      " 19  Clearances                  16 non-null     int64  \n",
      " 20  Interceptions               16 non-null     int64  \n",
      " 21  Clearances off line         15 non-null     float64\n",
      " 22  Clean Sheets                16 non-null     int64  \n",
      " 23  Blocks                      16 non-null     int64  \n",
      " 24  Goals conceded              16 non-null     int64  \n",
      " 25  Saves made                  16 non-null     int64  \n",
      " 26  Saves-to-shots ratio        16 non-null     object \n",
      " 27  Fouls Won                   16 non-null     int64  \n",
      " 28  Fouls Conceded              16 non-null     int64  \n",
      " 29  Offsides                    16 non-null     int64  \n",
      " 30  Yellow Cards                16 non-null     int64  \n",
      " 31  Red Cards                   16 non-null     int64  \n",
      " 32  Subs on                     16 non-null     int64  \n",
      " 33  Subs off                    16 non-null     int64  \n",
      " 34  Players Used                16 non-null     int64  \n",
      "dtypes: float64(1), int64(29), object(5)\n",
      "memory usage: 4.5+ KB\n"
     ]
    }
   ],
   "source": [
    "euro12.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43300230",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 5. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a3f24901",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Yellow Cards</th>\n",
       "      <th>Red Cards</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Czech Republic</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>England</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Greece</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Italy</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Poland</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Russia</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Spain</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Team  Yellow Cards  Red Cards\n",
       "0               Croatia             9          0\n",
       "1        Czech Republic             7          0\n",
       "2               Denmark             4          0\n",
       "3               England             5          0\n",
       "4                France             6          0\n",
       "5               Germany             4          0\n",
       "6                Greece             9          1\n",
       "7                 Italy            16          0\n",
       "8           Netherlands             5          0\n",
       "9                Poland             7          1\n",
       "10             Portugal            12          0\n",
       "11  Republic of Ireland             6          1\n",
       "12               Russia             6          0\n",
       "13                Spain            11          0\n",
       "14               Sweden             7          0\n",
       "15              Ukraine             5          0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\n",
    "discipline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c53099a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 6. Sort the teams by Red Cards, then to Yellow Cards"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f2dc9295",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Yellow Cards</th>\n",
       "      <th>Red Cards</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Greece</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Poland</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Italy</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Spain</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Czech Republic</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Russia</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>England</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Team  Yellow Cards  Red Cards\n",
       "6                Greece             9          1\n",
       "9                Poland             7          1\n",
       "11  Republic of Ireland             6          1\n",
       "7                 Italy            16          0\n",
       "10             Portugal            12          0\n",
       "13                Spain            11          0\n",
       "0               Croatia             9          0\n",
       "1        Czech Republic             7          0\n",
       "14               Sweden             7          0\n",
       "4                France             6          0\n",
       "12               Russia             6          0\n",
       "3               England             5          0\n",
       "8           Netherlands             5          0\n",
       "15              Ukraine             5          0\n",
       "2               Denmark             4          0\n",
       "5               Germany             4          0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discipline.sort_values(['Red Cards', 'Yellow Cards'], ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e98e8a57",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 7. Calculate the mean Yellow Cards given per Team"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f0eb4744",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.4375"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discipline['Yellow Cards'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d50679d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 8. Filter teams that scored more than 6 goals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b48acd3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Goals</th>\n",
       "      <th>Shots on target</th>\n",
       "      <th>Shots off target</th>\n",
       "      <th>Shooting Accuracy</th>\n",
       "      <th>% Goals-to-shots</th>\n",
       "      <th>Total shots (inc. Blocked)</th>\n",
       "      <th>Hit Woodwork</th>\n",
       "      <th>Penalty goals</th>\n",
       "      <th>Penalties not scored</th>\n",
       "      <th>...</th>\n",
       "      <th>Saves made</th>\n",
       "      <th>Saves-to-shots ratio</th>\n",
       "      <th>Fouls Won</th>\n",
       "      <th>Fouls Conceded</th>\n",
       "      <th>Offsides</th>\n",
       "      <th>Yellow Cards</th>\n",
       "      <th>Red Cards</th>\n",
       "      <th>Subs on</th>\n",
       "      <th>Subs off</th>\n",
       "      <th>Players Used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>10</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>47.8%</td>\n",
       "      <td>15.6%</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>62.6%</td>\n",
       "      <td>63</td>\n",
       "      <td>49</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Spain</td>\n",
       "      <td>12</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>55.9%</td>\n",
       "      <td>16.0%</td>\n",
       "      <td>100</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>93.8%</td>\n",
       "      <td>102</td>\n",
       "      <td>83</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n",
       "5   Germany     10               32                32             47.8%   \n",
       "13    Spain     12               42                33             55.9%   \n",
       "\n",
       "   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n",
       "5             15.6%                          80             2              1   \n",
       "13            16.0%                         100             0              1   \n",
       "\n",
       "    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n",
       "5                      0  ...          10                 62.6%         63   \n",
       "13                     0  ...          15                 93.8%        102   \n",
       "\n",
       "   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n",
       "5              49        12             4          0       15        15   \n",
       "13             83        19            11          0       17        17   \n",
       "\n",
       "    Players Used  \n",
       "5             17  \n",
       "13            18  \n",
       "\n",
       "[2 rows x 35 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12[euro12.Goals > 6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ae5a338",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 9. Select the teams that start with G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5713bb53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Goals</th>\n",
       "      <th>Shots on target</th>\n",
       "      <th>Shots off target</th>\n",
       "      <th>Shooting Accuracy</th>\n",
       "      <th>% Goals-to-shots</th>\n",
       "      <th>Total shots (inc. Blocked)</th>\n",
       "      <th>Hit Woodwork</th>\n",
       "      <th>Penalty goals</th>\n",
       "      <th>Penalties not scored</th>\n",
       "      <th>...</th>\n",
       "      <th>Saves made</th>\n",
       "      <th>Saves-to-shots ratio</th>\n",
       "      <th>Fouls Won</th>\n",
       "      <th>Fouls Conceded</th>\n",
       "      <th>Offsides</th>\n",
       "      <th>Yellow Cards</th>\n",
       "      <th>Red Cards</th>\n",
       "      <th>Subs on</th>\n",
       "      <th>Subs off</th>\n",
       "      <th>Players Used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>10</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>47.8%</td>\n",
       "      <td>15.6%</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>62.6%</td>\n",
       "      <td>63</td>\n",
       "      <td>49</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Greece</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>30.7%</td>\n",
       "      <td>19.2%</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>13</td>\n",
       "      <td>65.1%</td>\n",
       "      <td>67</td>\n",
       "      <td>48</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n",
       "5  Germany     10               32                32             47.8%   \n",
       "6   Greece      5                8                18             30.7%   \n",
       "\n",
       "  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n",
       "5            15.6%                          80             2              1   \n",
       "6            19.2%                          32             1              1   \n",
       "\n",
       "   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n",
       "5                     0  ...          10                 62.6%         63   \n",
       "6                     1  ...          13                 65.1%         67   \n",
       "\n",
       "  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n",
       "5             49        12             4          0       15        15   \n",
       "6             48        12             9          1       12        12   \n",
       "\n",
       "   Players Used  \n",
       "5            17  \n",
       "6            20  \n",
       "\n",
       "[2 rows x 35 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12[euro12.Team.str.startswith('G')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89bf72f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 10. Select the first 7 columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "31761fc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Goals</th>\n",
       "      <th>Shots on target</th>\n",
       "      <th>Shots off target</th>\n",
       "      <th>Shooting Accuracy</th>\n",
       "      <th>% Goals-to-shots</th>\n",
       "      <th>Total shots (inc. Blocked)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>51.9%</td>\n",
       "      <td>16.0%</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Czech Republic</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>41.9%</td>\n",
       "      <td>12.9%</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>50.0%</td>\n",
       "      <td>20.0%</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>England</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>50.0%</td>\n",
       "      <td>17.2%</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>24</td>\n",
       "      <td>37.9%</td>\n",
       "      <td>6.5%</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Germany</td>\n",
       "      <td>10</td>\n",
       "      <td>32</td>\n",
       "      <td>32</td>\n",
       "      <td>47.8%</td>\n",
       "      <td>15.6%</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Greece</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>30.7%</td>\n",
       "      <td>19.2%</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Italy</td>\n",
       "      <td>6</td>\n",
       "      <td>34</td>\n",
       "      <td>45</td>\n",
       "      <td>43.0%</td>\n",
       "      <td>7.5%</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>36</td>\n",
       "      <td>25.0%</td>\n",
       "      <td>4.1%</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Poland</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>39.4%</td>\n",
       "      <td>5.2%</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>6</td>\n",
       "      <td>22</td>\n",
       "      <td>42</td>\n",
       "      <td>34.3%</td>\n",
       "      <td>9.3%</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Republic of Ireland</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>36.8%</td>\n",
       "      <td>5.2%</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Russia</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>31</td>\n",
       "      <td>22.5%</td>\n",
       "      <td>12.5%</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Spain</td>\n",
       "      <td>12</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>55.9%</td>\n",
       "      <td>16.0%</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "      <td>47.2%</td>\n",
       "      <td>13.8%</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>26</td>\n",
       "      <td>21.2%</td>\n",
       "      <td>6.0%</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Team  Goals  Shots on target  Shots off target  \\\n",
       "0               Croatia      4               13                12   \n",
       "1        Czech Republic      4               13                18   \n",
       "2               Denmark      4               10                10   \n",
       "3               England      5               11                18   \n",
       "4                France      3               22                24   \n",
       "5               Germany     10               32                32   \n",
       "6                Greece      5                8                18   \n",
       "7                 Italy      6               34                45   \n",
       "8           Netherlands      2               12                36   \n",
       "9                Poland      2               15                23   \n",
       "10             Portugal      6               22                42   \n",
       "11  Republic of Ireland      1                7                12   \n",
       "12               Russia      5                9                31   \n",
       "13                Spain     12               42                33   \n",
       "14               Sweden      5               17                19   \n",
       "15              Ukraine      2                7                26   \n",
       "\n",
       "   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n",
       "0              51.9%            16.0%                          32  \n",
       "1              41.9%            12.9%                          39  \n",
       "2              50.0%            20.0%                          27  \n",
       "3              50.0%            17.2%                          40  \n",
       "4              37.9%             6.5%                          65  \n",
       "5              47.8%            15.6%                          80  \n",
       "6              30.7%            19.2%                          32  \n",
       "7              43.0%             7.5%                         110  \n",
       "8              25.0%             4.1%                          60  \n",
       "9              39.4%             5.2%                          48  \n",
       "10             34.3%             9.3%                          82  \n",
       "11             36.8%             5.2%                          28  \n",
       "12             22.5%            12.5%                          59  \n",
       "13             55.9%            16.0%                         100  \n",
       "14             47.2%            13.8%                          39  \n",
       "15             21.2%             6.0%                          38  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12.iloc[: , 0:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61d1290c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 11. Select all columns except the last 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "129cc341",
   "metadata": {},
   "outputs": [],
   "source": [
    "# using the negative indexing here\n",
    "euro12.iloc[: , :-3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d9d2e1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 12. Present only the Shooting Accuracy from England, Italy and Russia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4fea779e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Team</th>\n",
       "      <th>Shooting Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>England</td>\n",
       "      <td>50.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Italy</td>\n",
       "      <td>43.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Russia</td>\n",
       "      <td>22.5%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Team Shooting Accuracy\n",
       "3   England             50.0%\n",
       "7     Italy             43.0%\n",
       "12   Russia             22.5%"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euro12.loc[euro12.Team.isin(['England', 'Italy', 'Russia']), ['Team','Shooting Accuracy']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daf008a2",
   "metadata": {},
   "source": [
    "### Group By Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f948fc33",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 1. Import the necessary libraries, assign it to a variable called euro12."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1dbe4b8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>beer_servings</th>\n",
       "      <th>spirit_servings</th>\n",
       "      <th>wine_servings</th>\n",
       "      <th>total_litres_of_pure_alcohol</th>\n",
       "      <th>continent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>AS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Albania</td>\n",
       "      <td>89</td>\n",
       "      <td>132</td>\n",
       "      <td>54</td>\n",
       "      <td>4.9</td>\n",
       "      <td>EU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0.7</td>\n",
       "      <td>AF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>245</td>\n",
       "      <td>138</td>\n",
       "      <td>312</td>\n",
       "      <td>12.4</td>\n",
       "      <td>EU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Angola</td>\n",
       "      <td>217</td>\n",
       "      <td>57</td>\n",
       "      <td>45</td>\n",
       "      <td>5.9</td>\n",
       "      <td>AF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Antigua &amp; Barbuda</td>\n",
       "      <td>102</td>\n",
       "      <td>128</td>\n",
       "      <td>45</td>\n",
       "      <td>4.9</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>193</td>\n",
       "      <td>25</td>\n",
       "      <td>221</td>\n",
       "      <td>8.3</td>\n",
       "      <td>SA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>21</td>\n",
       "      <td>179</td>\n",
       "      <td>11</td>\n",
       "      <td>3.8</td>\n",
       "      <td>EU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australia</td>\n",
       "      <td>261</td>\n",
       "      <td>72</td>\n",
       "      <td>212</td>\n",
       "      <td>10.4</td>\n",
       "      <td>OC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Austria</td>\n",
       "      <td>279</td>\n",
       "      <td>75</td>\n",
       "      <td>191</td>\n",
       "      <td>9.7</td>\n",
       "      <td>EU</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             country  beer_servings  spirit_servings  wine_servings  \\\n",
       "0        Afghanistan              0                0              0   \n",
       "1            Albania             89              132             54   \n",
       "2            Algeria             25                0             14   \n",
       "3            Andorra            245              138            312   \n",
       "4             Angola            217               57             45   \n",
       "5  Antigua & Barbuda            102              128             45   \n",
       "6          Argentina            193               25            221   \n",
       "7            Armenia             21              179             11   \n",
       "8          Australia            261               72            212   \n",
       "9            Austria            279               75            191   \n",
       "\n",
       "   total_litres_of_pure_alcohol continent  \n",
       "0                           0.0        AS  \n",
       "1                           4.9        EU  \n",
       "2                           0.7        AF  \n",
       "3                          12.4        EU  \n",
       "4                           5.9        AF  \n",
       "5                           4.9       NaN  \n",
       "6                           8.3        SA  \n",
       "7                           3.8        EU  \n",
       "8                          10.4        OC  \n",
       "9                           9.7        EU  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "drinks = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv')\n",
    "drinks.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01c0a109",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 2. Which continent drinks more beer on average?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3e9d3fd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "continent\n",
       "AF     61.471698\n",
       "AS     37.045455\n",
       "EU    193.777778\n",
       "OC     89.687500\n",
       "SA    175.083333\n",
       "Name: beer_servings, dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drinks.groupby('continent').beer_servings.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1351a9b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 3. For each continent print the statistics for wine consumption."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "837a5d4a",
   "metadata": {},
   "source": [
    "drinks.groupby('continent').wine_servings.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b7008d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 4. Print the mean, min and max values for spirit consumption."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2bcd15d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>continent</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AF</th>\n",
       "      <td>16.339623</td>\n",
       "      <td>0</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AS</th>\n",
       "      <td>60.840909</td>\n",
       "      <td>0</td>\n",
       "      <td>326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EU</th>\n",
       "      <td>132.555556</td>\n",
       "      <td>0</td>\n",
       "      <td>373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OC</th>\n",
       "      <td>58.437500</td>\n",
       "      <td>0</td>\n",
       "      <td>254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA</th>\n",
       "      <td>114.750000</td>\n",
       "      <td>25</td>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean  min  max\n",
       "continent                      \n",
       "AF          16.339623    0  152\n",
       "AS          60.840909    0  326\n",
       "EU         132.555556    0  373\n",
       "OC          58.437500    0  254\n",
       "SA         114.750000   25  302"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "drinks.groupby('continent').spirit_servings.agg(['mean', 'min', 'max'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf22807",
   "metadata": {},
   "source": [
    "### Apply Method Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f7a2367",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 1. Import the necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "fdf4483b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>...</th>\n",
       "      <th>famrel</th>\n",
       "      <th>freetime</th>\n",
       "      <th>goout</th>\n",
       "      <th>Dalc</th>\n",
       "      <th>Walc</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>G1</th>\n",
       "      <th>G2</th>\n",
       "      <th>G3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>16</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n",
       "0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n",
       "1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n",
       "2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n",
       "3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n",
       "4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n",
       "\n",
       "  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
       "0      4        3      4     1     1      3        6   5   6   6  \n",
       "1      5        3      3     1     1      3        4   5   5   6  \n",
       "2      4        3      2     2     3      3       10   7   8  10  \n",
       "3      3        2      2     1     1      5        2  15  14  15  \n",
       "4      4        3      2     1     2      5        4   6  10  10  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "url = 'https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/04_Apply/Students_Alcohol_Consumption/student-mat.csv'\n",
    "data = pd.read_csv(url)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38b76ab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 2. For the purpose of this exercise slice the dataframe from 'school' until the 'guardian' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "8354f055",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>16</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  \\\n",
       "0     GP   F   18       U     GT3       A     4     4  at_home   teacher   \n",
       "1     GP   F   17       U     GT3       T     1     1  at_home     other   \n",
       "2     GP   F   15       U     LE3       T     1     1  at_home     other   \n",
       "3     GP   F   15       U     GT3       T     4     2   health  services   \n",
       "4     GP   F   16       U     GT3       T     3     3    other     other   \n",
       "\n",
       "   reason guardian  \n",
       "0  course   mother  \n",
       "1  course   father  \n",
       "2   other   mother  \n",
       "3    home   mother  \n",
       "4    home   father  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "student = data.loc[: , \"school\":\"guardian\"]\n",
    "student.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b0d6dda",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 3. Create a lambda function that will capitalize strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b2e2f47d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       Teacher\n",
       "1         Other\n",
       "2         Other\n",
       "3      Services\n",
       "4         Other\n",
       "         ...   \n",
       "390    Services\n",
       "391    Services\n",
       "392       Other\n",
       "393       Other\n",
       "394     At_home\n",
       "Name: Fjob, Length: 395, dtype: object"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "caps = lambda i: i.capitalize()\n",
    "student['Mjob'].apply(caps)\n",
    "student['Fjob'].apply(caps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "826f35d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 4. Did you notice the original dataframe is still lowercase? Why is that? Fix it and capitalize Mjob and Fjob."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "fcd027a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>20</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Services</td>\n",
       "      <td>Services</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Services</td>\n",
       "      <td>Services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>21</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>18</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>Services</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>19</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Other</td>\n",
       "      <td>At_home</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    school sex  age address famsize Pstatus  Medu  Fedu      Mjob      Fjob  \\\n",
       "390     MS   M   20       U     LE3       A     2     2  Services  Services   \n",
       "391     MS   M   17       U     LE3       T     3     1  Services  Services   \n",
       "392     MS   M   21       R     GT3       T     1     1     Other     Other   \n",
       "393     MS   M   18       R     LE3       T     3     2  Services     Other   \n",
       "394     MS   M   19       U     LE3       T     1     1     Other   At_home   \n",
       "\n",
       "     reason guardian  \n",
       "390  course    other  \n",
       "391  course   mother  \n",
       "392  course    other  \n",
       "393  course   mother  \n",
       "394  course   father  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#student['Mjob'] = student['Mjob'].map(lambda x: x.upper())\n",
    "#student['Fjob'] = student['Fjob'].map(lambda x: x.upper())\n",
    "\n",
    "student['Mjob'] = student['Mjob'].apply(caps)\n",
    "student['Fjob'] = student['Fjob'].apply(caps)\n",
    "student.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f5bfee0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 5. Create a function called majority that returns a boolean value to a new column called legal_drinker (Consider majority as older than 17 years old)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "4ce68388",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "      <th>legal_drinker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>385</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>At_home</td>\n",
       "      <td>Other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>At_home</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>19</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Services</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>Services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389</th>\n",
       "      <td>MS</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>20</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Services</td>\n",
       "      <td>Services</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Services</td>\n",
       "      <td>Services</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>21</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>other</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>18</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>Services</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>19</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Other</td>\n",
       "      <td>At_home</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    school sex  age address famsize Pstatus  Medu  Fedu      Mjob      Fjob  \\\n",
       "385     MS   F   18       R     GT3       T     2     2   At_home     Other   \n",
       "386     MS   F   18       R     GT3       T     4     4   Teacher   At_home   \n",
       "387     MS   F   19       R     GT3       T     2     3  Services     Other   \n",
       "388     MS   F   18       U     LE3       T     3     1   Teacher  Services   \n",
       "389     MS   F   18       U     GT3       T     1     1     Other     Other   \n",
       "390     MS   M   20       U     LE3       A     2     2  Services  Services   \n",
       "391     MS   M   17       U     LE3       T     3     1  Services  Services   \n",
       "392     MS   M   21       R     GT3       T     1     1     Other     Other   \n",
       "393     MS   M   18       R     LE3       T     3     2  Services     Other   \n",
       "394     MS   M   19       U     LE3       T     1     1     Other   At_home   \n",
       "\n",
       "         reason guardian  legal_drinker  \n",
       "385       other   mother           True  \n",
       "386  reputation   mother           True  \n",
       "387      course   mother           True  \n",
       "388      course   mother           True  \n",
       "389      course   mother           True  \n",
       "390      course    other           True  \n",
       "391      course   mother          False  \n",
       "392      course    other           True  \n",
       "393      course   mother           True  \n",
       "394      course   father           True  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def majority(x):\n",
    "    if x > 17:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "student['legal_drinker'] = student['age'].apply(majority)\n",
    "student.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b90da2e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Query 6. Multiply every number of the dataset by 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "3239737f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>reason</th>\n",
       "      <th>guardian</th>\n",
       "      <th>legal_drinker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>180</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>At_home</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>course</td>\n",
       "      <td>mother</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>170</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>At_home</td>\n",
       "      <td>Other</td>\n",
       "      <td>course</td>\n",
       "      <td>father</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>150</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>At_home</td>\n",
       "      <td>Other</td>\n",
       "      <td>other</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>150</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>40</td>\n",
       "      <td>20</td>\n",
       "      <td>Health</td>\n",
       "      <td>Services</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>160</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>home</td>\n",
       "      <td>father</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>160</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>40</td>\n",
       "      <td>30</td>\n",
       "      <td>Services</td>\n",
       "      <td>Other</td>\n",
       "      <td>reputation</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>160</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>170</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>Other</td>\n",
       "      <td>Teacher</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>150</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>30</td>\n",
       "      <td>20</td>\n",
       "      <td>Services</td>\n",
       "      <td>Other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>GP</td>\n",
       "      <td>M</td>\n",
       "      <td>150</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>Other</td>\n",
       "      <td>Other</td>\n",
       "      <td>home</td>\n",
       "      <td>mother</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  school sex  age address famsize Pstatus  Medu  Fedu      Mjob      Fjob  \\\n",
       "0     GP   F  180       U     GT3       A    40    40   At_home   Teacher   \n",
       "1     GP   F  170       U     GT3       T    10    10   At_home     Other   \n",
       "2     GP   F  150       U     LE3       T    10    10   At_home     Other   \n",
       "3     GP   F  150       U     GT3       T    40    20    Health  Services   \n",
       "4     GP   F  160       U     GT3       T    30    30     Other     Other   \n",
       "5     GP   M  160       U     LE3       T    40    30  Services     Other   \n",
       "6     GP   M  160       U     LE3       T    20    20     Other     Other   \n",
       "7     GP   F  170       U     GT3       A    40    40     Other   Teacher   \n",
       "8     GP   M  150       U     LE3       A    30    20  Services     Other   \n",
       "9     GP   M  150       U     GT3       T    30    40     Other     Other   \n",
       "\n",
       "       reason guardian  legal_drinker  \n",
       "0      course   mother           True  \n",
       "1      course   father          False  \n",
       "2       other   mother          False  \n",
       "3        home   mother          False  \n",
       "4        home   father          False  \n",
       "5  reputation   mother          False  \n",
       "6        home   mother          False  \n",
       "7        home   mother          False  \n",
       "8        home   mother          False  \n",
       "9        home   mother          False  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def times10(x):\n",
    "    if type(x) is int:\n",
    "        return 10 * x\n",
    "    return x\n",
    "\n",
    "student.applymap(times10).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44515f5a",
   "metadata": {},
   "source": [
    "### Data Visualization Exercise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f0ab7209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>item_name</th>\n",
       "      <th>choice_description</th>\n",
       "      <th>item_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Fresh Tomato Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Izze</td>\n",
       "      <td>[Clementine]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Nantucket Nectar</td>\n",
       "      <td>[Apple]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Tomatillo-Green Chili Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n",
       "      <td>$16.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...</td>\n",
       "      <td>$10.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Side of Chips</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Tomatillo Red Chili Salsa, [Fajita Vegetables...</td>\n",
       "      <td>$11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Soft Tacos</td>\n",
       "      <td>[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Guacamole</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$4.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Crispy Tacos</td>\n",
       "      <td>[Roasted Chili Corn Salsa, [Fajita Vegetables,...</td>\n",
       "      <td>$8.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Soft Tacos</td>\n",
       "      <td>[Roasted Chili Corn Salsa, [Rice, Black Beans,...</td>\n",
       "      <td>$8.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Fresh Tomato Salsa, [Fajita Vegetables, Rice,...</td>\n",
       "      <td>$11.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Guacamole</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$4.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    order_id  quantity                              item_name  \\\n",
       "0          1         1           Chips and Fresh Tomato Salsa   \n",
       "1          1         1                                   Izze   \n",
       "2          1         1                       Nantucket Nectar   \n",
       "3          1         1  Chips and Tomatillo-Green Chili Salsa   \n",
       "4          2         2                           Chicken Bowl   \n",
       "5          3         1                           Chicken Bowl   \n",
       "6          3         1                          Side of Chips   \n",
       "7          4         1                          Steak Burrito   \n",
       "8          4         1                       Steak Soft Tacos   \n",
       "9          5         1                          Steak Burrito   \n",
       "10         5         1                    Chips and Guacamole   \n",
       "11         6         1                   Chicken Crispy Tacos   \n",
       "12         6         1                     Chicken Soft Tacos   \n",
       "13         7         1                           Chicken Bowl   \n",
       "14         7         1                    Chips and Guacamole   \n",
       "\n",
       "                                   choice_description item_price  \n",
       "0                                                 NaN     $2.39   \n",
       "1                                        [Clementine]     $3.39   \n",
       "2                                             [Apple]     $3.39   \n",
       "3                                                 NaN     $2.39   \n",
       "4   [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n",
       "5   [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n",
       "6                                                 NaN     $1.69   \n",
       "7   [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n",
       "8   [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n",
       "9   [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   \n",
       "10                                                NaN     $4.45   \n",
       "11  [Roasted Chili Corn Salsa, [Fajita Vegetables,...     $8.75   \n",
       "12  [Roasted Chili Corn Salsa, [Rice, Black Beans,...     $8.75   \n",
       "13  [Fresh Tomato Salsa, [Fajita Vegetables, Rice,...    $11.25   \n",
       "14                                                NaN     $4.45   "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "\n",
    "# set this so the \n",
    "%matplotlib inline\n",
    "\n",
    "url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n",
    "chipo = pd.read_csv(url, sep = '\\t')\n",
    "chipo.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "87b7c665",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAJRCAYAAACjuXZnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABtYklEQVR4nO3dd1QU5+M18Lv0vlioiiJiAcTeUBNRiSjEShI1RtEYNQZiIbEl9tiNXWyJiiaaRGP7qlFUROwNFHvBhoWiIiColGXeP/yxryuYsLowu7P3cw7nsDPD7l1W4TL7zPPIBEEQQERERCRRBmIHICIiIipNLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaSw7REREJGksO0QEX19f+Pr6ih1DxcGDByGTyXDw4EGN3q9MJkNoaOh/HhcREQGZTIY7d+5o9PFLql+/fnB1dRXlsYmkhmWH9FLhLzKZTIYjR44U2S8IAlxcXCCTyfDxxx+XSoaHDx9i0qRJOHfuXKncv765efMmBg8eDDc3N5iZmcHGxgYtW7bEwoUL8eLFC7HjFau0/g34+vqiX79+730/d+7cgUwmw88//6zcdvnyZUyaNEm0Ekj0Llh2SK+ZmZlhw4YNRbbHxMTg/v37MDU1LbXHfvjwISZPnsyyowG7du2Ct7c3Nm7ciE6dOmHx4sWYMWMGqlSpgpEjR2LYsGFq32efPn3w4sULVK1atRQSv6KL/wYuX76MyZMns+yQTjESOwCRmAICArBp0yYsWrQIRkb//7/Dhg0b0KhRIzx+/FjEdJqTnZ0NS0vLMnmsgoIC5ObmwszMrEwe7/bt2+jZsyeqVq2KAwcOwMnJSbkvJCQECQkJ2LVrl9r3a2hoCENDQ01GJSKR8MwO6bVevXrhyZMn2Ldvn3Jbbm4u/v77b3z++efFfk12dja+++47uLi4wNTUFLVq1cLPP/8MQRBUjtu3bx9atWoFW1tbWFlZoVatWvjhhx8AvBqP0qRJEwBA//79lW+pRURE/Gves2fPomPHjrCxsYGVlRXatWuHEydOqBxT+BZdTEwMvvnmG9jb26Ny5crK/StXrkT16tVhbm6Opk2b4vDhw8U+Vk5ODiZOnAh3d3eYmprCxcUFo0aNQk5OjspxhWNg1q9fDy8vL5iammLPnj0AgAcPHuDLL7+Eg4MDTE1N4eXlhdWrVxd5rPv376Nr166wtLSEvb09RowYUeRx3mb27NnIysrCqlWrVIpOIXd392LP7Gzbtg116tRR5irMXKi4MTuurq74+OOPsXfvXtSvXx9mZmbw9PTEli1bitz/rVu38Omnn6J8+fKwsLBA8+bNVUrXu/wbKCgowIIFC+Dl5QUzMzM4ODhg8ODBePr06X99m7B48WJ4eXnBwsIC5cqVQ+PGjYs9q/lvIiIi8OmnnwIA2rRpo8z8+riq3bt344MPPoClpSWsra0RGBiIS5cuqdxPv379YGVlhcTERHz88cewsrJCpUqVEB4eDgC4cOEC2rZtC0tLS1StWrVIzry8PEyePBk1atSAmZkZKlSogFatWqn8PyZSIRDpoTVr1ggAhNOnTwstWrQQ+vTpo9y3bds2wcDAQHjw4IFQtWpVITAwULmvoKBAaNu2rSCTyYSvvvpKWLJkidCpUycBgDB8+HDlcRcvXhRMTEyExo0bCwsXLhSWL18ufP/998KHH34oCIIgJCcnC1OmTBEACIMGDRJ+++034bfffhNu3rz51swXL14ULC0tBScnJ+Gnn34SZs6cKVSrVk0wNTUVTpw4UeS5eXp6Cq1btxYWL14szJw5UxAEQfj1118FAEKLFi2ERYsWCcOHDxdsbW0FNzc3oXXr1sr7UCgUQvv27QULCwth+PDhwooVK4TQ0FDByMhI6NKli0ouAIKHh4dgZ2cnTJ48WQgPDxfOnj0rJCcnC5UrVxZcXFyEKVOmCMuWLRM6d+4sABDmz5+v/Prnz58LNWvWFMzMzIRRo0YJCxYsEBo1aiTUrVtXACBER0f/62tZqVIlwc3N7V+PeTNvvXr1lN/HBQsWCG5uboKFhYXw+PHjIt/H27dvK7dVrVpVqFmzpmBrayuMGTNGmDdvnuDt7S0YGBgIe/fuVR6XnJwsODg4CNbW1sKPP/4ozJs3T6hXr55gYGAgbNmyRXnMv/0bCA4OFqpWraqS/auvvhKMjIyEgQMHCsuXLxdGjx4tWFpaCk2aNBFyc3OVx7Vu3VoIDg5W3l65cqUAQPjkk0+EFStWCAsXLhQGDBggDB069F+/V7dv3xYACHPmzBEEQRBu3rwpDB06VAAg/PDDD8rMycnJgiAIwrp16wSZTCZ06NBBWLx4sTBr1izB1dVVsLW1Vfk+BgcHC2ZmZoKnp6fw9ddfC+Hh4UKLFi0EAMKaNWsEZ2dnYeTIkcLixYsFLy8vwdDQULh165by63/44QdBJpMJAwcOFH755Rdh7ty5Qq9evZT/zonexLJDeun1srNkyRLB2tpaeP78uSAIgvDpp58Kbdq0EQRBKFJ2tm3bJgAQpk6dqnJ/n3zyiSCTyYSEhARBEARh/vz5AgDh0aNHb81w+vRp5Q/3kujatatgYmKiUogePnwoWFtbK0vU68+tVatWQn5+vnJ7bm6uYG9vL9SvX1/IyclRbi/8Rfh62fntt98EAwMD4fDhwyoZli9fLgAQjh49qtwGQDAwMBAuXbqkcuyAAQMEJycnlQIhCILQs2dPQS6XK7/fCxYsEAAIGzduVB6TnZ0tuLu7/2fZycjIEAAUKWD/BoBgYmKifK0EQRDi4+MFAMLixYuV295WdgAImzdvVsng5OQkNGjQQLlt+PDhAgCV79+zZ8+EatWqCa6uroJCoRAE4d//DbxZdg4fPiwAENavX69y3J49e4rd/rouXboIXl5eb/+mvMWbZUcQBGHTpk3Fvi7Pnj0TbG1thYEDB6psT05OFuRyucr24OBgAYAwffp05banT58K5ubmgkwmE/7880/l9qtXrwoAhIkTJyq31atXT+X/JdF/4dtYpPc+++wzvHjxAjt37sSzZ8+wc+fOt76F9c8//8DQ0BBDhw5V2f7dd99BEATs3r0bAGBrawsA2L59OwoKCt47o0KhwN69e9G1a1e4ubkptzs5OeHzzz/HkSNHkJmZqfI1AwcOVBlzcubMGaSmpuLrr7+GiYmJcnu/fv0gl8tVvnbTpk3w8PBA7dq18fjxY+VH27ZtAQDR0dEqx7du3Rqenp7K24IgYPPmzejUqRMEQVC5D39/f2RkZCAuLg7Aq++pk5MTPvnkE+XXW1hYYNCgQf/5fSl8ztbW1v957Ov8/PxQvXp15e26devCxsYGt27d+s+vdXZ2Rrdu3ZS3bWxs0LdvX5w9exbJyckAXj2npk2bolWrVsrjrKysMGjQINy5cweXL19WKy/w6jWRy+X46KOPVL6fjRo1gpWVVZHX5HW2tra4f/8+Tp8+rfbjltS+ffuQnp6OXr16qeQzNDREs2bNis331VdfqWSsVasWLC0t8dlnnym316pVC7a2tiqvja2tLS5duoQbN26U2vMhaWHZIb1nZ2cHPz8/bNiwAVu2bIFCoVD5xfu6u3fvwtnZucgvVw8PD+V+AOjRowdatmyJr776Cg4ODujZsyc2btz4zsXn0aNHeP78OWrVqlVkn4eHBwoKCnDv3j2V7dWqVSuSHQBq1Kihst3Y2FilQAHAjRs3cOnSJdjZ2al81KxZEwCQmpr6r4/16NEjpKenY+XKlUXuo3///ir3cffuXbi7u0Mmk6ncR3HP9U02NjYAgGfPnv3nsa+rUqVKkW3lypUr0diX4rIWfl8Kx/fcvXv3ra9V4X513bhxAxkZGbC3ty/yPc3Kyirymrxu9OjRsLKyQtOmTVGjRg2EhITg6NGjamf4r3wA0LZt2yL59u7dWySfmZkZ7OzsVLbJ5XJUrly5yPdXLpervDZTpkxBeno6atasCW9vb4wcORLnz5/X6PMhaeHVWEQAPv/8cwwcOBDJycno2LGj8szMuzI3N8ehQ4cQHR2NXbt2Yc+ePfjrr7/Qtm1b7N27t0yu8jE3N3/nry0oKIC3tzfmzZtX7H4XF5d/fazCUvfFF18gODi42PuoW7fuO+crZGNjA2dnZ1y8eFGtr3vb9194Y5C5NikoKIC9vT3Wr19f7P43i8PrPDw8cO3aNezcuRN79uzB5s2bsXTpUkyYMAGTJ0/WWD4A+O233+Do6Fhk/+tXOwJvfw1K8tp8+OGHuHnzJrZv3469e/fi119/xfz587F8+XKVs0VEhVh2iAB069YNgwcPxokTJ/DXX3+99biqVati//79ePbsmcrZnatXryr3FzIwMEC7du3Qrl07zJs3D9OnT8ePP/6I6Oho+Pn5Ffnr9d/Y2dnBwsIC165dK7Lv6tWrMDAwKFJAissOvPoLvPDtKODVlS23b99GvXr1lNuqV6+O+Ph4tGvXTq2cr+e1traGQqGAn5/ff+a6ePEiBEFQeazinmtxPv74Y6xcuRLHjx+Hj4+P2lnVlZCQUCTr9evXAUA543HVqlXf+loV7geg1ve2evXq2L9/P1q2bPlORdbS0hI9evRAjx49kJubi+7du2PatGkYO3asWtMEvC1z4duC9vb2//maa0L58uXRv39/9O/fH1lZWfjwww8xadIklh0qFt/GIsKr8RTLli3DpEmT0KlTp7ceFxAQAIVCgSVLlqhsnz9/PmQyGTp27AgASEtLK/K19evXBwDlJdWF896kp6f/Zz5DQ0O0b98e27dvV7kUOiUlBRs2bECrVq2Ub+m8TePGjWFnZ4fly5cjNzdXuT0iIqJIhs8++wwPHjzAL7/8UuR+Xrx4gezs7P/MGxQUhM2bNxd71uXRo0fKzwMCAvDw4UP8/fffym3Pnz/HypUr//UxCo0aNQqWlpb46quvkJKSUmT/zZs3sXDhwhLdV0k8fPgQW7duVd7OzMzEunXrUL9+feUZjYCAAJw6dQrHjx9XHpednY2VK1fC1dVVOb5JnX8Dn332GRQKBX766aci+/Lz8//1Pp48eaJy28TEBJ6enhAEAXl5ef/52K97W2Z/f3/Y2Nhg+vTpxd7n66/5+3rz+VhZWcHd3b3E0xWQ/uGZHaL/87a3W17XqVMntGnTBj/++CPu3LmDevXqYe/evdi+fTuGDx+u/Ot2ypQpOHToEAIDA1G1alWkpqZi6dKlqFy5snLQavXq1WFra4vly5fD2toalpaWaNasWZHxL4WmTp2qnLvnm2++gZGREVasWIGcnBzMnj37P7MbGxtj6tSpGDx4MNq2bYsePXrg9u3bWLNmTZExO3369MHGjRvx9ddfIzo6Gi1btoRCocDVq1exceNGREZGonHjxv/6eDNnzkR0dDSaNWuGgQMHwtPTE2lpaYiLi8P+/fuVhXDgwIFYsmQJ+vbti9jYWDg5OeG3336DhYXFfz6nwu/jhg0b0KNHD3h4eKBv376oU6cOcnNzcezYMWzatEkjSycUqlmzJgYMGIDTp0/DwcEBq1evRkpKCtasWaM8ZsyYMfjjjz/QsWNHDB06FOXLl8fatWtx+/ZtbN68GQYGBsrsJf030Lp1awwePBgzZszAuXPn0L59exgbG+PGjRvYtGkTFi5c+NaxZu3bt4ejoyNatmwJBwcHXLlyBUuWLEFgYKDag7vr168PQ0NDzJo1CxkZGTA1NUXbtm1hb2+PZcuWoU+fPmjYsCF69uwJOzs7JCYmYteuXWjZsmWRPxLelaenJ3x9fdGoUSOUL18eZ86cwd9//12iNc9IT4l3IRiReF6/9PzfvHnpuSC8usR2xIgRgrOzs2BsbCzUqFFDmDNnjlBQUKA8JioqSujSpYvg7OwsmJiYCM7OzkKvXr2E69evq9zX9u3bBU9PT8HIyKhEl6HHxcUJ/v7+gpWVlWBhYSG0adNGOHbsmFrPbenSpcr5eRo3biwcOnRIaN26tcql54Lw6lL1WbNmCV5eXoKpqalQrlw5oVGjRsLkyZOFjIwM5XEAhJCQkGIfKyUlRQgJCRFcXFwEY2NjwdHRUWjXrp2wcuVKlePu3r0rdO7cWbCwsBAqVqwoDBs2THlJ9X/Ns1Po+vXrwsCBAwVXV1fBxMREsLa2Flq2bCksXrxYePny5X/mrVq1qsrcNG+79DwwMFCIjIwU6tatK5iamgq1a9cWNm3aVOT+bt68KXzyySeCra2tYGZmJjRt2lTYuXNnkePe9m+guHl2BOHVVAGNGjUSzM3NBWtra8Hb21sYNWqU8PDhw7d+b1asWCF8+OGHQoUKFQRTU1OhevXqwsiRI1Vex+IUd+m5IAjCL7/8Iri5uQmGhoZFXqPo6GjB399fkMvlgpmZmVC9enWhX79+wpkzZ5THBAcHC5aWlkUer3Xr1sVeIv/m/8OpU6cKTZs2FWxtbQVzc3Ohdu3awrRp01TmGiJ6nUwQtHhEHhGRFnF1dUWdOnWwc+dOsaMQkRo4ZoeIiIgkjWWHiIiIJI1lh4iIiCSNY3aIiIhI0nhmh4iIiCSNZYeIiIgkjZMK4tWaLg8fPoS1tfU7TY1PREREZU8QBDx79gzOzs7KyTqLw7KDV9O//9e6QkRERKSd7t27h8qVK791P8sOoJwu/d69e/+5vhARERFph8zMTLi4uPznsicsO/j/q/ja2Niw7BAREemY/xqCwgHKREREJGksO0RERCRpLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaSw7REREJGksO0RERCRpLDtEREQkaUZiByAiIiJVrmN2iR1BI+7MDBQ7AgCe2SEiIiKJY9khIiIiSWPZISIiIklj2SEiIiJJY9khIiIiSWPZISIiIklj2SEiIiJJE7XsuLq6QiaTFfkICQkBALx8+RIhISGoUKECrKysEBQUhJSUFJX7SExMRGBgICwsLGBvb4+RI0ciPz9fjKdDREREWkjUsnP69GkkJSUpP/bt2wcA+PTTTwEAI0aMwI4dO7Bp0ybExMTg4cOH6N69u/LrFQoFAgMDkZubi2PHjmHt2rWIiIjAhAkTRHk+REREpH1kgiAIYocoNHz4cOzcuRM3btxAZmYm7OzssGHDBnzyyScAgKtXr8LDwwPHjx9H8+bNsXv3bnz88cd4+PAhHBwcAADLly/H6NGj8ejRI5iYmJTocTMzMyGXy5GRkQEbG5tSe35EREQlwRmUS6akv7+1ZsxObm4ufv/9d3z55ZeQyWSIjY1FXl4e/Pz8lMfUrl0bVapUwfHjxwEAx48fh7e3t7LoAIC/vz8yMzNx6dKltz5WTk4OMjMzVT6IiIhImrSm7Gzbtg3p6eno168fACA5ORkmJiawtbVVOc7BwQHJycnKY14vOoX7C/e9zYwZMyCXy5UfLi4umnsiREREpFW0puysWrUKHTt2hLOzc6k/1tixY5GRkaH8uHfvXqk/JhEREYlDK1Y9v3v3Lvbv348tW7Yotzk6OiI3Nxfp6ekqZ3dSUlLg6OioPObUqVMq91V4tVbhMcUxNTWFqampBp8BERERaSutOLOzZs0a2NvbIzDw/w9katSoEYyNjREVFaXcdu3aNSQmJsLHxwcA4OPjgwsXLiA1NVV5zL59+2BjYwNPT8+yewJERESktUQ/s1NQUIA1a9YgODgYRkb/P45cLseAAQMQFhaG8uXLw8bGBt9++y18fHzQvHlzAED79u3h6emJPn36YPbs2UhOTsa4ceMQEhLCMzdEREQEQAvKzv79+5GYmIgvv/yyyL758+fDwMAAQUFByMnJgb+/P5YuXarcb2hoiJ07d2LIkCHw8fGBpaUlgoODMWXKlLJ8CkRERKTFtGqeHbFwnh0iItImnGenZHRunh0iIiKi0sCyQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJImetl58OABvvjiC1SoUAHm5ubw9vbGmTNnlPsFQcCECRPg5OQEc3Nz+Pn54caNGyr3kZaWht69e8PGxga2trYYMGAAsrKyyvqp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/ojJkydjzJgxMDBQ+10wtcyfPx8GBgYICgpCTk4O/P39sXTpUuV+Q0ND7Ny5E0OGDIGPjw8sLS0RHByMKVOmlGouIiIi0h1ql53c3Fz06NGjVIrOm2OBzMzMEB4ejvDw8Ld+TdWqVfHPP/9oPAsRERFJg9qNJTg4GH/99VdpZCEiIiLSOLXP7CgUCsyePRuRkZGoW7dukQHK8+bN01g4IiIioveldtm5cOGCcmbiixcvqux7fbAyERERkTZQu+xER0eXRg4iIiKiUlG6l1MRERERiaxEZ3a6d++OiIgI2NjYoHv37v967JYtWzQSjIiIiEgTSlR25HK5cjyOXC4v1UBEREREmlSisrNmzRpMmTIF33//PdasWVPamYiIiIg0psRjdiZPnoysrKzSzEJERESkcSW+GksQhNLMQVSmXMfsEjvCe7szM1DsCEREOkGtq7E4jw4RERHpGrXm2alZs+Z/Fp60tLT3CkRERESkSWqVncmTJ/NqLCIiItIpapWdnj17wt7evrSyEBEREWlcicfscLwOERER6aISlx1ejUVERES6qMRvYxUUFJRmDiIiIqJSwYVAiYiISNJYdoiIiEjSWHaIiIhI0kpUdho2bIinT58CAKZMmYLnz5+XaigiIiIiTSlR2bly5Qqys7MBcEFQIiIi0i0luhqrfv366N+/P1q1agVBEPDzzz/Dysqq2GMnTJig0YBERERE76NEZSciIgITJ07Ezp07IZPJsHv3bhgZFf1SmUzGskNERERapURlp1atWvjzzz8BAAYGBoiKiuKyEURERKQT1FobC+DkgkRERKRb1C47AHDz5k0sWLAAV65cAQB4enpi2LBhqF69ukbDEREREb0vtefZiYyMhKenJ06dOoW6deuibt26OHnyJLy8vLBv377SyEhERET0ztQ+szNmzBiMGDECM2fOLLJ99OjR+OijjzQWjoiIiOh9qX1m58qVKxgwYECR7V9++SUuX76skVBEREREmqJ22bGzs8O5c+eKbD937hyv0CIiIiKto/bbWAMHDsSgQYNw69YttGjRAgBw9OhRzJo1C2FhYRoPSERERPQ+1C4748ePh7W1NebOnYuxY8cCAJydnTFp0iQMHTpU4wGJiIiI3ofaZUcmk2HEiBEYMWIEnj17BgCwtrbWeDAiIiIiTXineXYKseQQERGRtlN7gDIRERGR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Pj4AAB8fH0ybNg2pqamwt7cHAOzbtw82Njbw9PQs9nFNTU1hamqq8edDRERE2uedrsbSlJCQEGzYsAHbt2+HtbW1coyNXC6Hubk55HI5BgwYgLCwMJQvXx42Njb49ttv4ePjg+bNmwMA2rdvD09PT/Tp0wezZ89GcnIyxo0bh5CQEBYaIiIiErfsLFu2DADg6+ursn3NmjXo168fAGD+/PkwMDBAUFAQcnJy4O/vr7K6uqGhIXbu3IkhQ4bAx8cHlpaWCA4OVnvOHyIiIpImUcuOIAj/eYyZmRnCw8MRHh7+1mOqVq2Kf/75R5PRiIiISCK4ECgRERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSRrLDhEREUkayw4RERFJGssOERERSZqoZefQoUPo1KkTnJ2dIZPJsG3bNpX9giBgwoQJcHJygrm5Ofz8/HDjxg2VY9LS0tC7d2/Y2NjA1tYWAwYMQFZWVhk+CyIiItJmopad7Oxs1KtXD+Hh4cXunz17NhYtWoTly5fj5MmTsLS0hL+/P16+fKk8pnfv3rh06RL27duHnTt34tChQxg0aFBZPQUiIiLSckZiPnjHjh3RsWPHYvcJgoAFCxZg3Lhx6NKlCwBg3bp1cHBwwLZt29CzZ09cuXIFe/bswenTp9G4cWMAwOLFixEQEICff/4Zzs7OZfZciIiISDtp7Zid27dvIzk5GX5+fsptcrkczZo1w/HjxwEAx48fh62trbLoAICfnx8MDAxw8uTJt953Tk4OMjMzVT6IiIhImrS27CQnJwMAHBwcVLY7ODgo9yUnJ8Pe3l5lv5GREcqXL688pjgzZsyAXC5Xfri4uGg4PREREWkLrS07pWns2LHIyMhQfty7d0/sSERERFRKtLbsODo6AgBSUlJUtqekpCj3OTo6IjU1VWV/fn4+0tLSlMcUx9TUFDY2NiofREREJE1aW3aqVasGR0dHREVFKbdlZmbi5MmT8PHxAQD4+PggPT0dsbGxymMOHDiAgoICNGvWrMwzExERkfYR9WqsrKwsJCQkKG/fvn0b586dQ/ny5VGlShUMHz4cU6dORY0aNVCtWjWMHz8ezs7O6Nq1KwDAw8MDHTp0wMCBA7F8+XLk5eUhNDQUPXv25JVYREREBEDksnPmzBm0adNGeTssLAwAEBwcjIiICIwaNQrZ2dkYNGgQ0tPT0apVK+zZswdmZmbKr1m/fj1CQ0PRrl07GBgYICgoCIsWLSrz50JERETaSdSy4+vrC0EQ3rpfJpNhypQpmDJlyluPKV++PDZs2FAa8YiIiEgCtHbMDhEREZEmsOwQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGksewQERGRpLHsEBERkaSx7BAREZGkSabshIeHw9XVFWZmZmjWrBlOnToldiQiIiLSApIoO3/99RfCwsIwceJExMXFoV69evD390dqaqrY0YiIiEhkkig78+bNw8CBA9G/f394enpi+fLlsLCwwOrVq8WORkRERCLT+bKTm5uL2NhY+Pn5KbcZGBjAz88Px48fFzEZERERaQMjsQO8r8ePH0OhUMDBwUFlu4ODA65evVrs1+Tk5CAnJ0d5OyMjAwCQmZlZajkLcp6X2n2XpdL8HpUlKbwefC20B18L7SKF14OvhXr3LwjCvx6n82XnXcyYMQOTJ08ust3FxUWENLpFvkDsBFSIr4X24GuhXfh6aI+yei2ePXsGuVz+1v06X3YqVqwIQ0NDpKSkqGxPSUmBo6NjsV8zduxYhIWFKW8XFBQgLS0NFSpUgEwmK9W8pSUzMxMuLi64d+8ebGxsxI6j1/haaBe+HtqDr4X2kMpr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gwcPxvz580VIRkRiY9khIkmIj49Hhw4d3rq/ffv2iI2NLcNERKQtWHaISBJSUlKKXGb+OiMjIzx69KgMExGRtmDZISJJqFSpEi5evPjW/efPn4eTk1MZJiIibcGyQ0SSEBAQgPHjx+Ply5dF9r148QITJ07Exx9/LEIyIhIb59khIklISUlBw4YNYWhoiNDQUNSqVQsAcPXqVYSHh0OhUCAuLg4ODg4iJyWissayQ0SScffuXQwZMgSRkZEo/NEmk8ng7++P8PBwVKtWTeSERCQGlh0ikpynT58iISEBgiCgRo0aKFeunNiRiEhELDtEREQkaRygTERERJLGskNERESSxrJDREREksayQ0RERJLGskNEWqtfv37o2rUrAMDX1xfDhw8XNQ8R6SaWHSIiIpI0lh0i0nr9+vVDTEwMFi5cCJlMBplMhjt37gAALl68iI4dO8LKygoODg7o06cPHj9+rPxaX19ffPvttxg+fDjKlSsHBwcH/PLLL8jOzkb//v1hbW0Nd3d37N69W/k1T58+Re/evWFnZwdzc3PUqFEDa9asKeunTUQawrJDRFpv4cKF8PHxwcCBA5GUlISkpCS4uLggPT0dbdu2RYMGDXDmzBns2bMHKSkp+Oyzz1S+fu3atahYsSJOnTqFb7/9FkOGDMGnn36KFi1aIC4uDu3bt0efPn3w/PlzAMD48eNx+fJl7N69G1euXMGyZctQsWJFMZ46EWkAJxUkIq3Vr18/pKenY9u2bfD19UX9+vWxYMEC5f6pU6fi8OHDiIyMVG67f/8+XFxccO3aNdSsWRO+vr5QKBQ4fPgwAEChUEAul6N79+5Yt24dACA5ORlOTk44fvw4mjdvjs6dO6NixYpYvXp1mT5fIiodPLNDRDorPj4e0dHRsLKyUn7Url0bAHDz5k3lcXXr1lV+bmhoiAoVKsDb21u5rXBx0NTUVADAkCFD8Oeff6J+/foYNWoUjh07VhZPh4hKiZHYAYiI3lVWVhY6deqEWbNmFdnn5OSk/NzY2Fhln0wmU9kmk8kAAAUFBQCAjh074u7du/jnn3+wb98+tGvXDiEhIfj5559L42kQUSlj2SEinWBiYgKFQqGyrWHDhti8eTNcXV1hZKTZH2d2dnYIDg5GcHAwPvjgA4wcOZJlh0hH8W0sItIJrq6uOHnyJO7cuYPHjx+joKAAISEhSEtLQ69evXD69GncvHkTkZGR6N+/f5FipI4JEyZg+/btSEhIwKVLl7Bz5054eHho8NkQUVli2SEinfD999/D0NAQnp6esLOzQ2JiIpydnXH06FEoFAq0b98e3t7eGD58OGxtbWFg8O4/3kxMTDB27FjUrVsXH374IQwNDfHnn39q8NkQUVni1VhEREQkaTyzQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREksayQ0RERJLGskNERESSxrJDREREkvb/AKIzABqilDGVAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = chipo.item_name\n",
    "letter_counts = Counter(x)\n",
    "df = pd.DataFrame.from_dict(letter_counts, orient='index')\n",
    "df = df[0].sort_values(ascending = True)[45:50]\n",
    "\n",
    "df.plot(kind='bar')\n",
    "plt.xlabel('Items')\n",
    "plt.ylabel('Number of Times Ordered')\n",
    "plt.title('Most ordered Chipotle\\'s Items')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "09fe2f23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 36.7)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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MVi4cGFdhU9EREamLlJr58TURCM0UBepYW9jb+KoyFLJhBDCnAHcu3cPqampyMnJwY8//oh//etfOHjwoDaZedC+ffvQt29fXLlyBf7+/pVur6ioCEVFRdr3arUa3t7eyMnJgVKpNFk/iIjIOAqLC+EU46RXMiOXyZEXncdEph5Sq9VQqVQ1nr/NfmnJ1tYWAQEBCAwMRExMDDp37oyPP/640rbdunUDAFy5cqXK7SkUCu1dUGUvIiKSDnsbe4S3Doe1vPqLBtZyawxrM4xJTANn9kSmPI1GozOi8qCkpCQAgKenZx1GREREdW120GyUakqrbVOqKUVU96g6iogslVnnyERHRyMsLAw+Pj7Izc3Fhg0bcODAAezcuRNXr17Fhg0bMGjQIDRu3BhnzpxBVFQUQkJC0KlTJ3OGTUREJtbDpwdiB8di+i/TK9y9ZC23RqmmFLGDY3nHEpk3kbl16xbGjRuH9PR0qFQqdOrUCTt37kT//v2RlpaGPXv2YMWKFcjPz4e3tzeGDx+OuXPnmjNkIiKqI1O7TkVH945YfnQ54i/GQyM0kMvkCG8djqjuUUxiCIAFTPY1NX0nCxERkeUqLC6EukgNpULJOTENhL7nb7Pffk1ERFQText7JjBUKYub7EtERESkLyYyREREJFlMZIiIiEiymMgQERGRZDGRISIiIsliIkNERESSxUSGiIiIJIuJDBEREUkWExkiIiKSLCYyREREJFlMZIiIiEiymMgQERGRZDGRISIiIsliIkNERESSxUSGiIiIJIuJDBEREUkWExkiIiKSLCYyREREJFlMZIiIiEiymMgQERGRZDGRISIiIsliIkNERESSxUSGiIiIJIuJDBEREUkWExkiIiKSLCYyREREJFlMZIiIiEiymMgQERGRZDGRISIiIsliIkNERESSxUSGiIiIJIuJDBEREUkWExkiIiKSLCYyREREJFlMZIiIiEiymMgQERGRZDGRISIiIsliIkNERESSZdZEJi4uDp06dYJSqYRSqURQUBC2b9+uXX/37l1ERkaicePGcHJywvDhw5GZmWnGiImIiMiSmDWRad68ORYvXoyTJ0/ixIkT6NOnD8LDw3H+/HkAQFRUFLZu3YoffvgBBw8exM2bNxEREWHOkImIiMiCyIQQwtxBPMjV1RVLly7FiBEj4Obmhg0bNmDEiBEAgIsX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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "chipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n",
    "orders = chipo.groupby('order_id').sum()\n",
    "plt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n",
    "\n",
    "plt.xlabel('Order Price')\n",
    "plt.ylabel('Items ordered')\n",
    "plt.title('Number of items ordered per order price')\n",
    "plt.ylim(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e4a18de9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_items = chipo.groupby('item_name')['quantity'].sum().sort_values(ascending=False).head(10)\n",
    "\n",
    "top_items.plot(kind='bar', figsize=(10, 6), color='skyblue')\n",
    "plt.title('Top 10 Most Ordered Items')\n",
    "plt.xlabel('Item Name')\n",
    "plt.ylabel('Quantity Ordered')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "74f66013",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1sAAAIjCAYAAAD1OgEdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABIEklEQVR4nO3de3zP9f//8fub7T2bnRx2sDArZE75OKShKGpplPCJcjaVmnImiSRR5FRIfSqrkEMHFUlyTI5NDkmiZIptJJthNtvr94fv3j9vG2b29Da7XS+X96Xez9fz9Xw9Xnu91e6er9fzbbMsyxIAAAAAoEAVc3UBAAAAAHAjImwBAAAAgAGELQAAAAAwgLAFAAAAAAYQtgAAAADAAMIWAAAAABhA2AIAAAAAAwhbAAAAAGAAYQsAAAAADCBsAcA1NmrUKNlstmtyrGbNmqlZs2aO96tXr5bNZtMnn3xyTY7fvXt3VapU6ZocK79SU1PVq1cvBQcHy2azqV+/fq4uCef5888/ZbPZFBsbm6f+NptNo0aNMloTAOQVYQsArkJsbKxsNpvjVaJECYWEhCgyMlJvvPGGTpw4USDHOXTokEaNGqVt27YVyHgF6XquLS/Gjh2r2NhYPfXUU/roo4/UpUuXi/atVKmSWrVq5Xh/6tQpjRo1SqtXr74GlV45y7L00Ucf6a677pK/v7+8vLxUq1YtjRkzRqdOnXJ1eU7mzp2rKVOm5Knv119/TaACUCjYLMuyXF0EABRWsbGx6tGjh0aPHq2wsDBlZGQoISFBq1ev1vLly1WxYkV9+eWXql27tmOfs2fP6uzZsypRokSej/Pjjz+qQYMGmjVrlrp3757n/dLT0yVJdrtd0rmZrbvvvlsLFy5U+/bt8zxOfmvLyMhQVlaWPDw8CuRYJtxxxx1yc3PTunXrLtu3UqVKqlmzphYvXixJOnr0qAICAvTiiy9ed7/8Z2Zm6rHHHtOCBQt05513qm3btvLy8tL333+vuXPnqkaNGvruu+8UGBjo6lIlSa1atdLPP/+sP//806ndsiydOXNG7u7uKl68uCSpT58+mj59unL7FSYtLU1ubm5yc3O7FmUDwCXxXyIAKAAtW7ZU/fr1He+HDRumlStXqlWrVnrwwQe1e/dueXp6StI1+UXw1KlT8vLycoQsV3F3d3fp8fMiKSlJ1atXd3UZBW78+PFasGCBBg0apAkTJjjan3jiCT3yyCNq06aNevTooSVLlriwysvLnjHOqyvpCwCmcRshABhyzz33aMSIETpw4IBmz57taM/tma3ly5erSZMm8vf3l7e3t2699VY9//zzks7NRjVo0ECS1KNHD8cti9nPsDRr1kw1a9ZUXFyc7rrrLnl5eTn2vfCZrWyZmZl6/vnnFRwcrJIlS+rBBx/UwYMHnfpUqlQp11m088e8XG25PbN18uRJDRw4UBUqVJCHh4duvfVWvf766zlmKWw2m/r06aNFixapZs2a8vDwUI0aNfTNN9/k/gO/QFJSkqKjoxUUFKQSJUrotttu0wcffODYnv382v79+7VkyRJH7RfOrFzMn3/+qYCAAEnSSy+95Nj//BmuX3/9Ve3bt1fp0qVVokQJ1a9fX19++aXTONm3oq5bt07PPvusAgIC5O/vryeffFLp6ek6fvy4unbtqlKlSqlUqVIaMmRIrjM65zt9+rQmTJigqlWraty4cTm2t27dWt26ddPXX3+tzZs3O9ov9rzThZ+FY8eOadCgQapVq5a8vb3l6+urli1bavv27U77Zf+MFyxYoFdeeUXly5dXiRIl1Lx5c+3bt8/Rr1mzZlqyZIkOHDjg+Dlmf24ufGare/fumj59uqPe7NelzuHvv/9Wz549FRQU5Pgcvf/++znO880331SNGjXk5eWlUqVKqX79+po7d26uP2MAyAtmtgDAoC5duuj555/Xt99+q8cffzzXPrt27VKrVq1Uu3ZtjR49Wh4eHtq3b59++OEHSVJ4eLhGjx6tkSNH6oknntCdd94pSWrUqJFjjH/++UctW7ZUx44d1blzZwUFBV2yrldeeUU2m01Dhw5VUlKSpkyZohYtWmjbtm2OGbi8yEtt57MsSw8++KBWrVql6Oho1alTR8uWLdPgwYP1999/a/LkyU79161bp88++0xPP/20fHx89MYbb6hdu3aKj49XmTJlLlrX6dOn1axZM+3bt099+vRRWFiYFi5cqO7du+v48ePq27evwsPD9dFHH6l///4qX768Bg4cKEmOAHU5AQEBeuutt/TUU0/p4YcfVtu2bSXJccvorl271LhxY91000167rnnVLJkSS1YsEBt2rTRp59+qocffthpvGeeeUbBwcF66aWXtHHjRr3zzjvy9/fX+vXrVbFiRY0dO1Zff/21JkyYoJo1a6pr164XrW3dunX6999/1bdv34vOonbt2lWzZs3SV199pdtvvz1P55ztjz/+0KJFi/Tf//5XYWFhSkxM1Ntvv62mTZvql19+UUhIiFP/V199VcWKFdOgQYOUnJys8ePHq1OnTtq0aZMkafjw4UpOTtZff/3l+Ax4e3vneuwnn3xShw4d0vLly/XRRx9dttbExETdcccdjvAeEBCgpUuXKjo6WikpKY4FUf73v//p2WefVfv27dW3b1+lpaVpx44d2rRpkx577LEr+vkAgIMFAMi3WbNmWZKsLVu2XLSPn5+f9Z///Mfx/sUXX7TO/8/v5MmTLUnWkSNHLjrGli1bLEnWrFmzcmxr2rSpJcmaOXNmrtuaNm3qeL9q1SpLknXTTTdZKSkpjvYFCxZYkqypU6c62kJDQ61u3bpddsxL1datWzcrNDTU8X7RokWWJGvMmDFO/dq3b2/ZbDZr3759jjZJlt1ud2rbvn27Jcl68803cxzrfFOmTLEkWbNnz3a0paenWxEREZa3t7fTuYeGhlpRUVGXHO9ifY8cOWJJsl588cUcfZs3b27VqlXLSktLc7RlZWVZjRo1sqpUqeJoy/4MRUZGWllZWY72iIgIy2azWb1793a0nT171ipfvrzTz/9S5//5559ftM+xY8csSVbbtm0dbRc7lws/C2lpaVZmZqZTn/3791seHh7W6NGjHW3Zn7fw8HDrzJkzjvapU6dakqydO3c62qKiopw+K+ePe+HnKyYmxrrYrzAXnkN0dLRVrlw56+jRo079OnbsaPn5+VmnTp2yLMuyHnroIatGjRq5jgkA+cVthABgmLe39yVXJfT395ckffHFF8rKysrXMTw8PNSjR4889+/atat8fHwc79u3b69y5crp66+/ztfx8+rrr79W8eLF9eyzzzq1Dxw4UJZlaenSpU7tLVq00C233OJ4X7t2bfn6+uqPP/647HGCg4P16KOPOtrc3d317LPPKjU1VWvWrCmAs7m4Y8eOaeXKlXrkkUd04sQJHT16VEePHtU///yjyMhI7d27V3///bfTPtHR0U63wzVs2FCWZSk6OtrRVrx4cdWvX/+y55/9eTv/Gl8oe1t+Vsz08PBQsWLnfoXIzMzUP//847j9devWrTn69+jRw+n5wewZ0Mudx9WyLEuffvqpWrduLcuyHNfh6NGjioyM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IwoMDMzTmC+88ILj3ytVqqRBgwZp3rx5GjJkiKM9KytLsbGx8vHxkSR16dJFK1as0CuvvCI/Pz/Z7XZ5eXkpODg412PY7Xb5+fnJZrM59fH29lZkZKRmzZqlBg0aSJJmzZqlpk2b6uabb851rN9++0233HKL7HZ7jm0hISHy9fXVb7/95mjLyMjQjBkzdNtttzn2X7p0qTZv3uw45nvvvef0M123bp02b96spKQkeXh4SJJef/11LVq0SJ988omeeOIJSeduHfzwww8VEBCQ5/2mTJmi6OhoRUdHS5LGjBmj7777jtktACgAzGwBAK7a5WaucgsiFzN//nw1btxYwcHB8vb21gsvvKD4+HinPpUqVXIELUkqV65cjpmg/Hr88cf18ccfKy0tTenp6Zo7d6569ux5yX2uZObObrerdu3ajve7d++Wm5ub6tWr52irVq2a0+Id27dvV2pqqsqUKSNvb2/Ha//+/fr9998d/UJDQx1BK6/77d69Ww0bNnSqMSIiIs/nAwC4OGa2AAD5VrlyZdlsNu3evVsPP/xwju27d+9WQECAIzjYbLYcweT857E2bNigTp066aWXXlJkZKT8/Pw0b948TZw40Wkfd3d3p/c2m63AFppo3bq1PDw89Pnnn8tutysjI0Pt27e/aP+qVatq3bp1Sk9PzxEqDx06pJSUFFWtWtXR5unpecWLdKSmpqpcuXJavXp1jm3nh7KSJUvmaz8AgBnMbAEA8q1MmTK69957NWPGDJ0+fdppW0JCgubMmaPu3bs72gICAnT48GHH+7179+rUqVOO9+vXr1doaKiGDx+u+vXrq0qVKjpw4MAV12W325WZmZmvPm5uburWrZtmzZqlWbNmqWPHjjmeRztfx44dlZqaqrfffjvHttdff13u7u5q167dRfevVq2azp49q7i4OEfbnj17nL4PrG7dukpISJCbm5sqV67s9CpbtuxFx87LfuHh4dq0aZPTfhs3brzomACAvGNmCwBwVaZNm6ZGjRopMjJSY8aMUVhYmHbt2qXBgweratWqGjlypKPvPffco2nTpikiIkKZmZkaOnSo0yxVlSpVFB8fr3nz5qlBgwZasmSJPv/88yuuqVKlStq0aZP+/PNPeXt7q3Tp0rn2SU1N1YoVK3TbbbfJy8tLXl5ekqRevXo5npn64YcfLnmsiIgI9e3bV4MHD1Z6erratGmjjIwMzZ49W1OnTtWUKVNyLNBxvltvvVX333+/nnzySb311ltyc3NTv379nAJeixYtFBERoTZt2mj8+PGqWrWqDh06pCVLlujhhx9W/fr1cx07L/v17dtX3bt3V/369dW4cWPNmTNHu3btuugzagCAvGNmCwBwVapUqaItW7bo5ptv1iOPPKLQ0FC1bNlSVatW1Q8//CBvb29H34kTJ6pChQq688479dhjj2nQoEGOgCNJDz74oPr3768+ffqoTp06Wr9+/UWXXL+UQYMGqXjx4qpevboCAgJyPPMlnVuRsHfv3urQoYMCAgI0fvx4p3Nq1KiRqlWrluN5ptxMmTJFM2bM0Mcff6yaNWuqfv36Wrt2rRYtWqRnnnnmsvvPmjVLISEhatq0qdq2basnnnjCaUERm82mr7/+WnfddZd69OihqlWrqmPHjjpw4ICCgoIuOm5e9uvQoYNGjBihIUOGqF69ejpw4ICeeuqpy9YMALg8m3UlT/UCAJAHL774oiZNmqTly5frjjvucHU5V8yyLFWpUkVPP/20BgwY4OpyAACFFLcRAgAK3EsvvaRKlSpp48aNuv3221WsWOG5keLIkSOaN2+eEhISLvrdWgAA5AUzWwAAnMdms6ls2bKaOnWqHnvsMVeXAwAoxJjZAgDgPPwdJACgoBSe+zoAAAAAoBAhbAEAAACAAYQtAAAAADCAsAUAAAAABhC2AAAAAMAAwhYAAAAAGEDYAgAAAAADCFsAAAAAYMD/A7rVQTDZ9kwzAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(chipo['quantity'], bins=30, color='orange', edgecolor='black')\n",
    "plt.title('Distribution of Item Quantities')\n",
    "plt.xlabel('Quantity Ordered')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
